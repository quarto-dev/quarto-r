% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metadata.R
\name{write_yaml_metadata_block}
\alias{write_yaml_metadata_block}
\title{Write YAML Metadata Block for Quarto Documents}
\usage{
write_yaml_metadata_block(..., .list = NULL)
}
\arguments{
\item{...}{Named arguments to include in the metadata block. Names become
the metadata keys and values become the metadata values. These take
precedence over any conflicting keys in \code{.list}.}

\item{.list}{Optional list of additional metadata to include. This is useful
when you have metadata stored in a list variable. Keys in \code{.list} are
overridden by any matching keys provided in \code{...}.}
}
\value{
A character string containing the formatted YAML metadata block,
wrapped with \code{knitr::asis_output()} so it renders as raw markdown.
Returns \code{NULL} invisibly if no metadata is provided.
}
\description{
Creates a YAML metadata block that can be dynamically inserted into Quarto
documents from R code chunks. This allows setting metadata values based on
R computations, which can then be used with Quarto's conditional content
features like \code{when-meta} and \verb{\{\{< meta >\}\}} shortcodes.
}
\details{
The function converts R values to YAML format and wraps them in YAML
delimiters (\verb{---}). Logical values are converted to lowercase strings
("true"/"false") to ensure compatibility with Quarto's metadata system.

When both \code{...} and \code{.list} contain the same key, the value from \code{...}
takes precedence and will override the value from \code{.list}.

If no metadata is provided (empty \code{...} and \code{NULL} or empty \code{.list}),
the function returns \code{NULL} without generating any output.

\strong{Important}: When using this function in Quarto documents, you must set
the chunk option \code{output: asis} (or \verb{#| output: asis}) for the metadata
block to be properly processed by Quarto.

This addresses the limitation where Quarto metadata must be static and
cannot be set dynamically from R code during document rendering.
}
\section{Quarto Usage}{

To use this function in a Quarto document, create an R code chunk with
the \code{output: asis} option:

\if{html}{\out{<div class="sourceCode">}}\preformatted{```\{r\}
#| output: asis
write_yaml_metadata_block(admin = TRUE, version = "1.0")
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{
Without the `output: asis` option, the YAML metadata block will be
displayed as text rather than processed as metadata by Quarto.

}\if{html}{\out{</div>}}
}

\examples{
\dontrun{
# In a Quarto document R chunk with `#| output: asis`:
admin <- TRUE
user_level <- "advanced"

# Set metadata dynamically
write_yaml_metadata_block(
  admin = admin,
  level = user_level,
  timestamp = Sys.Date()
)

# Use with .list parameter
metadata_list <- list(version = "1.0", debug = FALSE)
write_yaml_metadata_block(.list = metadata_list)

# Direct arguments override .list values
base_config <- list(theme = "dark", debug = TRUE)
write_yaml_metadata_block(
  debug = FALSE,  # This overrides debug = TRUE from base_config
  author = "John",
  .list = base_config
)

# Then use in Quarto with conditional content:
# ::: {.content-visible when-meta="admin"}
# Admin-only content here
# :::
}

}
