[{"path":[]},{"path":"https://quarto-dev.github.io/quarto-r/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://quarto-dev.github.io/quarto-r/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://quarto-dev.github.io/quarto-r/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to quarto","title":"Contributing to quarto","text":"welcome contributions quarto R package. can contribute many ways: opening issues give feedback share ideas. fixing typos documentations submitting Pull Request (PR) fix opened issues submitting Pull Request (PR) suggest new features. (considered good practice open issues discuss ideas)","code":""},{"path":"https://quarto-dev.github.io/quarto-r/CONTRIBUTING.html","id":"to-submit-a-contribution-using-a-pull-request","dir":"","previous_headings":"","what":"To submit a contribution using a Pull Request:","title":"Contributing to quarto","text":"Fork repository make changes new branch specific PR. ok edit file repository using Edit button Github change simple enough. significant changes (e.g required fixing typos), ensure signed individual corporate contributor agreement appropriate. can send signed copy contribute@posit.co. Submit pull request. ok submit draft still working like feedback us. always good share open working . ’ll try responsive possible reviewing accepting pull requests. Appreciate contributions much!","code":""},{"path":"https://quarto-dev.github.io/quarto-r/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Posit Software, PBC Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/articles/advanced-vignettes.html","id":"about-vignettes-creation-with-quarto","dir":"Articles","previous_headings":"","what":"About vignettes creation with Quarto","title":"Custom Quarto Formats For Vignettes","text":"Creating vignette CRAN package way provide documentation inside package. Vignettes typically longer, detailed documents explain use package, provide examples, demonstrate functionality. However, vignettes also meant lightweight documentation format, can included package without heavy, hosted CRAN package pages. follow best practice, Quarto R package vignette engines default format minimal default Quarto HTML format. See vignette(\"hello\", package = \"quarto\"). also useful users default format correctly configures Quarto HTML format vignettes, users configure . However, advanced users may want customize format used vignettes, example working internal package CRAN release vignette size matter. vignette shows .","code":""},{"path":"https://quarto-dev.github.io/quarto-r/articles/advanced-vignettes.html","id":"using-quartoformat-engine-for-any-quarto-format","dir":"Articles","previous_headings":"","what":"Using ‘quarto::format’ engine for any Quarto format","title":"Custom Quarto Formats For Vignettes","text":"vignette needs produced custom format? example, organization custom Quarto format want use vignettes, can using quarto::format vignette engine. using quarto::format, vignette engine set default configuration use one defined YAML header Quarto . understand clearly, let’s illustrate examples: produce vignette default Quarto format (.e., format: html): produce vignette custom configuration Quarto HTML format: produce vignette cosmo theme, Bootstrap theme. Bootstrap can heavy, recommended CRAN vignettes. equivalent using quarto::html vignette engine directly: produce vignette using Bootstrap minimal feature set, detailed vignette(\"hello\", package = \"quarto\"). However, can provide CSS file way. Remember quarto::html uses vignette.css default, minimal CSS file provides basic styling vignettes. want use CSS file, can specify YAML header shown . quarto::format limited HTML format, Quarto format can used . example, can use create PDF vignette using LaTeX (equivalent using quarto::pdf vignette engine directly - see vignette(\"hello-pdf\", package = \"quarto\")) PDF vignette using Typst example: used CRAN vignettes CRAN try rebuild vignette, Typst may available systems. However, useful internal packages packages submitted CRAN, Typst PDF looks appealing LaTeX PDF.","code":"format: custom-html vignette: >   %\\VignetteIndexEntry{Custom HTML Vignette}   %\\VignetteEngine{quarto::format}   %\\VignetteEncoding{UTF-8} vignette: >   %\\VignetteIndexEntry{Custom HTML Vignette}   %\\VignetteEngine{quarto::format}   %\\VignetteEncoding{UTF-8} format:    html:     theme: cosmo vignette: >   %\\VignetteIndexEntry{Custom HTML Vignette}   %\\VignetteEngine{quarto::format}   %\\VignetteEncoding{UTF-8} format:    html:     theme: none     minimal: true     embed-resources: true     css: custom.css vignette: >   %\\VignetteIndexEntry{Custom HTML Vignette}   %\\VignetteEngine{quarto::format}   %\\VignetteEncoding{UTF-8} format:   typst:     toc: true vignette: >   %\\VignetteIndexEntry{Typst Vignette}   %\\VignetteEngine{quarto::format}   %\\VignetteEncoding{UTF-8}"},{"path":"https://quarto-dev.github.io/quarto-r/articles/advanced-vignettes.html","id":"recommendations","dir":"Articles","previous_headings":"","what":"Recommendations","title":"Custom Quarto Formats For Vignettes","text":"vignette engines available quarto package: advice use: quarto::html: Use CRAN vignettes, provides minimal HTML format suitable package documentation. quarto::pdf: Use CRAN vignettes prefer PDF format quarto::format: Use custom formats, internal packages want use specific Quarto format vignettes. also useful modify hardcoded defaults quarto::html makes format minimal.","code":"library(quarto) names(tools::vignetteEngine(package = \"quarto\")) [1] \"quarto::format\" \"quarto::html\"   \"quarto::pdf\""},{"path":"https://quarto-dev.github.io/quarto-r/articles/dynamic-metadata.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Dynamic Metadata in Quarto Documents","text":"vignette demonstrates use write_yaml_metadata_block() dynamically set metadata Quarto documents based R computations. functionality addresses key limitation Quarto metadata must traditionally static defined document header. Important: use function Quarto documents, must include output: asis chunk option (#| output: asis) R code chunks. Without option, YAML metadata displayed text instead processed metadata.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/articles/dynamic-metadata.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Dynamic Metadata in Quarto Documents","text":"Let’s start basic example set metadata dynamically: Now can set metadata based computed values. R cell used vignette source. Note #| output: asis chunk option - essential: generate YAML metadata block looks like body document: Quarto process metadata block additional metadata block frontmatter one. , make metadata available use throughout document. can used various ways, shortcodes conditional content. Using {{< meta key >}} shortcodes access metadata values: https://quarto.org/docs/authoring/variables.html#meta Using -meta attributes conditionally show/hide content based metadata values: https://quarto.org/docs/authoring/conditional.html#matching--metadata. metadata values must boolean. metadata block merged previous metadata blocks, existing metadata values can overwritten subsequent blocks.","code":"# Simulate some computed values user_type <- \"admin\" is_debug <- TRUE current_version <- \"2.1.0\" ```{r} #| label: metadata-block #| output: asis quarto::write_yaml_metadata_block(   user_level = user_type,   debug_mode = is_debug,   app_version = \"2.1.0\",   generated_at = format(Sys.time(), \"%Y-%m-%dT%H:%M:%S%z\") ) ``` --- user_level: admin debug_mode: true app_version: 2.1.0 generated_at: 2025-07-22T09:54:45+0000 ---"},{"path":"https://quarto-dev.github.io/quarto-r/articles/dynamic-metadata.html","id":"example-using-metadata-with-conditional-content","dir":"Articles","previous_headings":"","what":"Example: Using Metadata with Conditional Content","title":"Dynamic Metadata in Quarto Documents","text":"Now ’ve set metadata, can use Quarto’s conditional content features: Current user level: admin App version: 2.1.0 Debug mode: true Debug Information content visible debug_mode true. Since set TRUE, message visible. Generated : 2025-07-22T09:54:45+0000","code":""},{"path":"https://quarto-dev.github.io/quarto-r/articles/dynamic-metadata.html","id":"advanced-use-case-conditional-content-based-on-parameters","dir":"Articles","previous_headings":"","what":"Advanced Use Case: Conditional Content Based on parameters","title":"Dynamic Metadata in Quarto Documents","text":"Another powerful use case making Quarto parameters available metadata conditional content. allows control document behavior parameters leveraging Quarto’s conditional content features. ’s example demonstrates creating different versions sales report based parameters: approach particularly useful : Parameterized reporting: Generate different document versions based input parameters Conditional content: Show hide sections dynamically based computed values Document customization: Tailor content presentation different contexts audiences Workflow automation: Control document behavior programmatically parameter passing can render different versions passing parameters: key insight write_yaml_metadata_block(params = params) makes document parameters available metadata. boolean ones can used Quarto’s -meta unless-meta conditional attributes dynamic content control.","code":"--- title: \"Sales Report\" format: html  params:   region: \"North America\"   show_confidential: false   quarter: \"Q1\" ---  ```{r} #| echo: false #| output: asis quarto::write_yaml_metadata_block(   params = params ) ```  # {{< meta params.quarter >}} Sales Report - {{< meta params.region >}}  ::: {.content-visible when-meta=\"params.show_confidential\"} ::: {.callout-warning} ## Confidential Information This section contains sensitive financial data and competitor analysis.  Region: {{< meta params.region >}} Quarter: {{< meta params.quarter >}} :::  ```{r} # Show detailed financial breakdown cat(\"Detailed revenue breakdown by product line...\") cat(\"\\nConfidential metrics and competitor analysis...\") ``` :::  ::: {.content-visible unless-meta=\"params.show_confidential\"} ::: {.callout-note} ## Public Summary This report shows general performance metrics suitable for public distribution.  Region: `{r} params$region` Quarter: `{r} params$quarter` :::  ```{r} # Show summary metrics only cat(\"Overall performance summary for\", params$region) cat(\"\\nPublic-facing metrics for\", params$quarter) ``` ::: # Internal report with confidential data quarto::quarto_render(\"sales-report.qmd\",    execute_params = list(     region = \"North America\",      show_confidential = TRUE,      quarter = \"Q2\"   ))  # Public report without confidential data   quarto::quarto_render(\"sales-report.qmd\",    execute_params = list(     region = \"Europe\",      show_confidential = FALSE,      quarter = \"Q2\"   ))"},{"path":"https://quarto-dev.github.io/quarto-r/articles/dynamic-metadata.html","id":"advanced-use-case-email-variant-testing","dir":"Articles","previous_headings":"","what":"Advanced Use Case: Email Variant Testing","title":"Dynamic Metadata in Quarto Documents","text":"One powerful application dynamic metadata variant emails using Quarto’s email format. example shows randomly select email variant conditionally display different content based selection: approach particularly useful deploying email reports Posit Connect Quarto integration, supports email customization automated report distribution. example demonstrates several advanced concepts: Random variant selection: Using sample() randomly choose one three email variants Dynamic metadata generation: Creating boolean metadata flags variant using sprintf() setNames() Conditional email content: variant shows different content (different datasets, subjects) based selected metadata flag Email-specific features: Using Quarto’s email format .subject divs .email-scheduled metadata Logging tracking: Recording variant selected analysis purposes","code":"--- title: test conditional emails format: email email-preview: true ---  Pick variant  ```{r} variant <- sample(1:3, 1) ```  ```{r} #| echo: false #| output: asis quarto::write_yaml_metadata_block(   .list = setNames(     list(TRUE),      nm = sprintf(\"is_email_variant_%d\", variant)   ) ) ```  ::: {.email}  This email was sent from Quarto! With conditional output for condition `{r} variant`  ::: {.content-visible when-meta=\"is_email_variant_1\"}  email body 1  ```{r} head(mtcars) ```  ::: {.subject} subject 1 :::  :::  ::: {.content-visible when-meta=\"is_email_variant_2\"}  email body 2   ```{r} head(palmerpenguins::penguins) ```  ::: {.subject} subject 2 :::  :::  ::: {.content-visible when-meta=\"is_email_variant_3\"}  email body 3  ```{r} praise::praise() ```  ::: {.subject} subject 3 :::  :::  ::: {.email-scheduled} TRUE :::  :::  ## Logging  Case: `{r} variant`  Report run: `{r} Sys.time()`"},{"path":"https://quarto-dev.github.io/quarto-r/articles/dynamic-metadata.html","id":"technical-details","dir":"Articles","previous_headings":"","what":"Technical Details","title":"Dynamic Metadata in Quarto Documents","text":"write_yaml_metadata_block() function generates YAML metadata block can inserted document body. accepts named arguments list, converted YAML format. yaml R package used YAML serialization: https://github.com/vubiostat/r-yaml Look documentation package details YAML formatted structured R objects. Currently, package write YAML additional specific handlers, non-default behavior: TRUE FALSE converted true false YAML, respectively.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/articles/hello.html","id":"quarto-as-vignette-builder","dir":"Articles","previous_headings":"","what":"Quarto as vignette builder","title":"Quarto HTML Vignettes","text":"Add DESCRIPTION file:","code":"VignetteBuilder:     quarto"},{"path":"https://quarto-dev.github.io/quarto-r/articles/hello.html","id":"html-vignette-engines","dir":"Articles","previous_headings":"","what":"HTML Vignette Engines","title":"Quarto HTML Vignettes","text":"quarto R package registers vignette engines can used %\\VignetteEngine{} directives vignette headers. learn vignettes engine works, write vignette engines, see Writing R Extensions manual R Packages (2e) book. produce HTML vignette engine, add YAML header build HTML document using Quarto, suitable using vignette publish CRAN. Choice made create minimal HTML vignette default, built following changes based Quarto’s format: html defaults: HTML file produced standalone (.e. embed-resources: true) Bootstrap disabled (.e. theme: none minimal: true) custom CSS file provided. equivalent configurations set way can’t overridden YAML header vignette source file new configurations can set. Typical examples configurations adding table contents enabling rendering mathematical notation format options, e.g., MathJax. Specifically, two options can set following way: minimal default format deliberate limitation current implementation vignette engine. ensures HTML vignettes produced reasonable size can published CRAN without problems. Another limitation concerns interactive rendering. render vignette .qmd file using quarto render function, output based default HTML format Quarto vignette engine one. building vignette produce real results. details building vignettes available R Packages (2e) book. Intermediates resources created authoring workflow quarto render default format: html ignored package sources. Added .Rbuildignore (e.g usethis::use_build_ignore(\"vignettes/*_files\")) Added .gitignore (e.g. usethis::use_git_ignore(\"*_files\", \"vignettes\"))","code":"vignette: >   %\\VignetteIndexEntry{Vignette's Title}   %\\VignetteEngine{quarto::html}   %\\VignetteEncoding{UTF-8} --- format:    html:     theme: none     minimal: true     embed-resources: true     css: custom.css format:    html:     toc: true     html-math-method: mathjax vignette: >   %\\VignetteIndexEntry{Vignette's Title}   %\\VignetteEngine{quarto::html}   %\\VignetteEncoding{UTF-8}"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using Markdown in HTML Tables","text":"Quarto allows include Markdown syntax inside HTML tables, making possible add formatting, links, images, even complex elements like videos table cells. vignette demonstrates use table helper functions provided package simplify process. main challenge working Markdown HTML tables Quarto won’t automatically process Markdown content. Quarto addresses using special data-qmd attributes tell Quarto processor interpret content Markdown. package provides helper functions create attributes easily. See Quarto documentation HTML tables parsing: https://quarto.org/docs/authoring/tables.html#html-tables.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"when-to-use-these-functions","dir":"Articles","previous_headings":"","what":"When to Use These Functions","title":"Using Markdown in HTML Tables","text":"Use tbl_qmd_*() functions : Working table packages don’t built-Quarto support (like kableExtra) need raw HTML control Markdown content needs processed Quarto Migrating existing table code support Quarto’s HTML table processing Don’t use functions : table package already built-Quarto support (like gt’s fmt_markdown() tinytable’s format_tt(quarto = TRUE)) ’re working outside Quarto documents (functions effect) Simple formatting easy enough write raw HTML require Quarto Markdown processing","code":""},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Using Markdown in HTML Tables","text":"table helper functions create HTML elements (<span> <div>) appropriate data-qmd data-qmd-base64 attributes. two main types functions: main function tbl_qmd_span(), defaulting base64 encoding Two others explicit versions: tbl_qmd_span_base64() tbl_qmd_span_raw() main function tbl_qmd_div(), defaulting base64 encoding Two others explicit versions: tbl_qmd_div_base64() tbl_qmd_div_raw() Base64 encoding useful Markdown content contains special characters HTML tags, used default avoid escaping problems using feature. ’s happens don’t use helper functions: Without Quarto processing ’s table proper Quarto processing: Quarto processing Key point: Always remember set escape = FALSE using functions knitr::kable() similar functions. use tbl_qmd_span(\"**Bold text**\"), creates HTML like : Quarto sees data-qmd-base64 attribute processes base64-decoded content Markdown. helper functions offer two encoding options: Base64 encoding (default): Safer complex content special characters Raw encoding: readable HTML source, can escaping issues knitr::kable() function common way create tables R Markdown Quarto. setting escape = FALSE, can include HTML table cells: Table 1: table math equation rendered using Quarto’s data-qmd attribute","code":"library(quarto)  # Without helper functions - Markdown won't be processed basic_data <- data.frame(   Item = c(\"Item 1\", \"Item 2\", \"Item 3\"),   Description = c(\"**Bold text**\", \"*Italic text*\", \"`Code text`\") )  knitr::kable(   basic_data,   format = \"html\",   escape = FALSE,   caption = \"Without Quarto processing\" ) # With helper functions - Markdown will be processed enhanced_data <- data.frame(   Item = c(\"Item 1\", \"Item 2\", \"Item 3\"),   Description = c(     tbl_qmd_span(\"**Bold text**\"),     tbl_qmd_span(\"*Italic text*\"),     tbl_qmd_span(\"`Code text`\")   ) )  knitr::kable(   enhanced_data,   format = \"html\",   escape = FALSE,   caption = \"With Quarto processing\" ) <span data-qmd-base64=\"KipCb2xkIHRleHQqKg==\">**Bold text**<\/span> # Base64 encoding (default) - safer for complex content complex_content <- tbl_qmd_span_base64(\"Content with <em>HTML<\/em> & special chars\")  # Raw encoding - more readable but potential escaping issues simple_content <- tbl_qmd_span_raw(\"**Simple bold text**\")  data.frame(   Type = c(\"Base64\", \"Raw\"),   Content = c(complex_content, simple_content) ) |>   knitr::kable(format = \"html\", escape = FALSE) # Create a data frame with math expressions tbl <- data.frame(   var = c(\"$a$\", \"$b$\", \"$c$\"),   val = c(1, 2, 3) )  # Add data-qmd attributes to the math expressions tbl$var <- sapply(tbl$var, tbl_qmd_span)  # Create the table knitr::kable(tbl, format = \"html\", escape = FALSE)"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"before-and-after-comparison","dir":"Articles","previous_headings":"","what":"Before and After Comparison","title":"Using Markdown in HTML Tables","text":"’s happens don’t use helper functions: Without Quarto processing ’s table proper Quarto processing: Quarto processing Key point: Always remember set escape = FALSE using functions knitr::kable() similar functions.","code":"library(quarto)  # Without helper functions - Markdown won't be processed basic_data <- data.frame(   Item = c(\"Item 1\", \"Item 2\", \"Item 3\"),   Description = c(\"**Bold text**\", \"*Italic text*\", \"`Code text`\") )  knitr::kable(   basic_data,   format = \"html\",   escape = FALSE,   caption = \"Without Quarto processing\" ) # With helper functions - Markdown will be processed enhanced_data <- data.frame(   Item = c(\"Item 1\", \"Item 2\", \"Item 3\"),   Description = c(     tbl_qmd_span(\"**Bold text**\"),     tbl_qmd_span(\"*Italic text*\"),     tbl_qmd_span(\"`Code text`\")   ) )  knitr::kable(   enhanced_data,   format = \"html\",   escape = FALSE,   caption = \"With Quarto processing\" )"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"what-the-html-output-looks-like","dir":"Articles","previous_headings":"","what":"What the HTML Output Looks Like","title":"Using Markdown in HTML Tables","text":"use tbl_qmd_span(\"**Bold text**\"), creates HTML like : Quarto sees data-qmd-base64 attribute processes base64-decoded content Markdown.","code":"<span data-qmd-base64=\"KipCb2xkIHRleHQqKg==\">**Bold text**<\/span>"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"base64-vs-raw-encoding","dir":"Articles","previous_headings":"","what":"Base64 vs Raw Encoding","title":"Using Markdown in HTML Tables","text":"helper functions offer two encoding options: Base64 encoding (default): Safer complex content special characters Raw encoding: readable HTML source, can escaping issues","code":"# Base64 encoding (default) - safer for complex content complex_content <- tbl_qmd_span_base64(\"Content with <em>HTML<\/em> & special chars\")  # Raw encoding - more readable but potential escaping issues simple_content <- tbl_qmd_span_raw(\"**Simple bold text**\")  data.frame(   Type = c(\"Base64\", \"Raw\"),   Content = c(complex_content, simple_content) ) |>   knitr::kable(format = \"html\", escape = FALSE)"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"using-with-knitrkable","dir":"Articles","previous_headings":"","what":"Using with knitr::kable()","title":"Using Markdown in HTML Tables","text":"knitr::kable() function common way create tables R Markdown Quarto. setting escape = FALSE, can include HTML table cells: Table 1: table math equation rendered using Quarto’s data-qmd attribute","code":"# Create a data frame with math expressions tbl <- data.frame(   var = c(\"$a$\", \"$b$\", \"$c$\"),   val = c(1, 2, 3) )  # Add data-qmd attributes to the math expressions tbl$var <- sapply(tbl$var, tbl_qmd_span)  # Create the table knitr::kable(tbl, format = \"html\", escape = FALSE)"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"advanced-features","dir":"Articles","previous_headings":"","what":"Advanced Features","title":"Using Markdown in HTML Tables","text":"features Quarto-specific. table might used outside Quarto, can use display argument provide fallback text shown Markdown content can’t processed. example, might want show placeholder using video shortcodes table, video player won’t rendered outside Quarto: Behavior table processed Quarto simulated opting-HTML table processing specific table. example, html-table-processing: none cell option set like Quarto computation cell . Output HTML table processed Quarto, video shortcode rendered video player, regular text. See disabling HTML table processing Quarto documentation.","code":"# Create a video embed with a display text video_embed <- tbl_qmd_span(   \"{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}\",   display = \"[Video Player]\" )  # Create a data frame with the video embed data <- data.frame(   Content = c(\"Regular text\", video_embed),   Description = c(\"Just some text\", \"A YouTube video\") )  # Create the table knitr::kable(data, format = \"html\", escape = FALSE) ```{r} #| label: video-placeholder #| html-table-processing: none # Create a video embed with a display text video_embed <- tbl_qmd_span(   \"{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}\",   display = \"[Video Player]\" )  # Create a data frame with the video embed data <- data.frame(   Content = c(\"Regular text\", video_embed),   Description = c(\"Just some text\", \"A YouTube video\") )  # Create the table knitr::kable(data, format = \"html\", escape = FALSE) ```"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"display-text","dir":"Articles","previous_headings":"","what":"Display Text","title":"Using Markdown in HTML Tables","text":"features Quarto-specific. table might used outside Quarto, can use display argument provide fallback text shown Markdown content can’t processed. example, might want show placeholder using video shortcodes table, video player won’t rendered outside Quarto: Behavior table processed Quarto simulated opting-HTML table processing specific table. example, html-table-processing: none cell option set like Quarto computation cell . Output HTML table processed Quarto, video shortcode rendered video player, regular text. See disabling HTML table processing Quarto documentation.","code":"# Create a video embed with a display text video_embed <- tbl_qmd_span(   \"{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}\",   display = \"[Video Player]\" )  # Create a data frame with the video embed data <- data.frame(   Content = c(\"Regular text\", video_embed),   Description = c(\"Just some text\", \"A YouTube video\") )  # Create the table knitr::kable(data, format = \"html\", escape = FALSE) ```{r} #| label: video-placeholder #| html-table-processing: none # Create a video embed with a display text video_embed <- tbl_qmd_span(   \"{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}\",   display = \"[Video Player]\" )  # Create a data frame with the video embed data <- data.frame(   Content = c(\"Regular text\", video_embed),   Description = c(\"Just some text\", \"A YouTube video\") )  # Create the table knitr::kable(data, format = \"html\", escape = FALSE) ```"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"troubleshooting","dir":"Articles","previous_headings":"","what":"Troubleshooting","title":"Using Markdown in HTML Tables","text":"Content rendering Markdown: - Check escape = FALSE set table function - Verify Quarto HTML table processing enabled (’s default) - Ensure ’re using functions Quarto document Escaping problems: - Use base64 encoding (default) content special characters - Use tbl_qmd_span_base64() explicitly complex HTML content Performance large tables: - Base64 encoding adds overhead - consider raw encoding simple content large tables - Test specific use case determine performance acceptable Content appears HTML tags: - may forgotten escape = FALSE table function - Double-check table package supports raw HTML content Use simple test verify everything working: text appears bold, setup working correctly. Limitations Using data-qmd data-qmd-base64 attributes Quarto-specific feature work Quarto allowed process HTML tables. used environment document opts Quarto HTML table processing, content rendered expected.","code":"test_data <- data.frame(   Test = \"Markdown Processing\",   Result = tbl_qmd_span(\"**This should be bold**\") )  knitr::kable(test_data, format = \"html\", escape = FALSE)"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"common-issues","dir":"Articles","previous_headings":"","what":"Common Issues","title":"Using Markdown in HTML Tables","text":"Content rendering Markdown: - Check escape = FALSE set table function - Verify Quarto HTML table processing enabled (’s default) - Ensure ’re using functions Quarto document Escaping problems: - Use base64 encoding (default) content special characters - Use tbl_qmd_span_base64() explicitly complex HTML content Performance large tables: - Base64 encoding adds overhead - consider raw encoding simple content large tables - Test specific use case determine performance acceptable Content appears HTML tags: - may forgotten escape = FALSE table function - Double-check table package supports raw HTML content","code":""},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"testing-your-setup","dir":"Articles","previous_headings":"","what":"Testing Your Setup","title":"Using Markdown in HTML Tables","text":"Use simple test verify everything working: text appears bold, setup working correctly. Limitations Using data-qmd data-qmd-base64 attributes Quarto-specific feature work Quarto allowed process HTML tables. used environment document opts Quarto HTML table processing, content rendered expected.","code":"test_data <- data.frame(   Test = \"Markdown Processing\",   Result = tbl_qmd_span(\"**This should be bold**\") )  knitr::kable(test_data, format = \"html\", escape = FALSE)"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"table-package-integration","dir":"Articles","previous_headings":"","what":"Table Package Integration","title":"Using Markdown in HTML Tables","text":"summarize Markdown processing HTML tables within Quarto: possible thanks Quarto HTML Table parsing done using <span> <div> elements data-qmd data-qmd-base64 attributes R package producing tables providing raw HTML output can support Quarto feature allow Markdown content HTML tables. Currently, two ways can supported: Built-support: package already supports Quarto HTML table parsing offers way mark cells processed Quarto Quarto context. case, create <span> <div> elements data-qmd data-qmd-base64 attributes internally. External helper approach: package support Quarto HTML table parsing directly offers way insert raw HTML content table cells. case, can use helper functions provided package create <span> <div> elements appropriate attributes. show works popular R packages creating tables. ’re developing R package creates HTML tables, consider: Integration Options: 1. Full integration: Add native support data-qmd attributes (like gt tinytable) 2. Raw HTML support: Allow users insert raw HTML let use helper functions 3. Hybrid approach: Detect Quarto context automatically apply appropriate attributes Recommended Implementation: Testing Strategy: - Test inside outside Quarto documents - Verify fallback display text works correctly - Test various Markdown content types (math, links, formatting) kableExtra popular package creating styling tables R. produces raw HTML specific support Quarto’s HTML table parsing. However, can use helper functions insert Markdown content cells, allows inserting raw HTML content table cells (setting escape = FALSE keep raw HTML -). complex example combines features create complete HTML table Markdown content: design, flextable support inserting raw HTML content cells. Using tbl_qmd_span() tbl_qmd_div() functions directly flextable work expected. Unfortunately, flextable yet integrate Quarto’s HTML table parsing features, allow marking cell content Markdown processed Quarto. Quarto team working flextable developers find way support future. gt package provides way create tables rich formatting. gt allows inserting raw HTML content table cells built-support Quarto’s HTML table parsing. uses data-qmd attribute internally mark cells contain Markdown content. table example , using gt quarto R package functions. fmt_passthrough() used allow raw HTML content table cells, escape = FALSE set avoid escaping HTML content: However, gt already built-support rendering Markdown content, can use directly without needing tbl_qmd_span() tbl_qmd_div() functions. example built-support Markdown content gt: gt::fmt_markdown() aware Quarto context internally use data-qmd attribute render Markdown content correctly Quarto processes document. tinytable package website (https://vincentarelbundock.github.io/tinytable/): > tinytable small powerful R package draw beautiful tables variety formats: HTML, LaTeX, Word, PDF, PNG, Markdown, Typst. default, tinytable deactivates Quarto HTML table processing. design choice tinytable formatting affected Quarto’s HTML table processing. , previous table look like : Note display value video shortcode used, shortcode processed Quarto case. Quarto HTML table processing can re-enabled tinytable, case, handle data-qmd attribute internally, functions tbl_qmd_span() tbl_qmd_div() needed. Setting option opt-Quarto HTML table processing tables created tinytable. allows table using tbl_qmd_span() tbl_qmd_div() processed correctly Quarto. Let’s unset option: Note tinytable supports data-qmd attributes internally, functions tbl_qmd_span() tbl_qmd_div() needed using tinytable. can use tt() function directly Markdown content table cells, mark cells using Quarto Markdown processing.","code":"# Example function signature for package developers your_table_function <- function(data, markdown_cols = NULL, quarto = TRUE) {   # If quarto = TRUE and in Quarto context, apply data-qmd attributes   # to columns specified in markdown_cols } library(kableExtra)  # Create a data frame with different types of content complex_table <- data.frame(   Feature = c(\"Formatting\", \"Math\", \"References\", \"Media\"),   Example = c(     tbl_qmd_span(\"**Bold**, *italic*, and `code`\"),     tbl_qmd_span(\"$\\\\int_{a}^{b} f(x) \\\\, dx$\"),     tbl_qmd_span(\"See @tbl-kable-equation for example of a table\"),     tbl_qmd_div(       \"{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}\",       display = \"[Video Player]\"     )   ),   Notes = c(     \"Basic markdown formatting\",     \"LaTeX math expressions\",     \"Cross-references to other document elements\",     \"Embedded media using shortcodes\"   ) )  # Create and style the table kbl(complex_table, format = \"html\", escape = FALSE) |>   kable_classic() |>   column_spec(2, width = \"40%\") |>   row_spec(0, bold = TRUE, background = \"#f8f8f8\") library(gt) gt(complex_table) |>   fmt_passthrough(columns = \"Example\", escape = FALSE) data.frame(   Feature = c(\"Formatting\", \"Math\", \"References\", \"Media\"),   Example = c(     \"**Bold**, *italic*, and `code`\",     \"$\\\\int_{a}^{b} f(x) \\\\, dx$\",     \"See @tbl-kable-equation for example of a table\",     \"{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}\"   ),   Notes = c(     \"Basic markdown formatting\",     \"LaTeX math expressions\",     \"Cross-references to other document elements\",     \"Embedded media using shortcodes\"   ) ) |>   gt() |>   fmt_markdown(columns = \"Example\") library(tinytable)  tt(complex_table) options(tinytable_quarto_disable_processing = FALSE) tt(complex_table) options(tinytable_quarto_disable_processing = NULL) data.frame(   Feature = c(\"Formatting\", \"Math\", \"References\", \"Media\"),   Example = c(     \"**Bold**, *italic*, and `code`\",     \"$\\\\int_{a}^{b} f(x) \\\\, dx$\",     \"See @tbl-kable-equation for example of a table\",     \"{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}\"   ),   Notes = c(     \"Basic markdown formatting\",     \"LaTeX math expressions\",     \"Cross-references to other document elements\",     \"Embedded media using shortcodes\"   ) ) |>   tt() |>   format_tt(j = \"Example\", quarto = TRUE)"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"for-package-developers","dir":"Articles","previous_headings":"","what":"For Package Developers","title":"Using Markdown in HTML Tables","text":"’re developing R package creates HTML tables, consider: Integration Options: 1. Full integration: Add native support data-qmd attributes (like gt tinytable) 2. Raw HTML support: Allow users insert raw HTML let use helper functions 3. Hybrid approach: Detect Quarto context automatically apply appropriate attributes Recommended Implementation: Testing Strategy: - Test inside outside Quarto documents - Verify fallback display text works correctly - Test various Markdown content types (math, links, formatting)","code":"# Example function signature for package developers your_table_function <- function(data, markdown_cols = NULL, quarto = TRUE) {   # If quarto = TRUE and in Quarto context, apply data-qmd attributes   # to columns specified in markdown_cols }"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"using-with-kableextra","dir":"Articles","previous_headings":"","what":"Using with kableExtra","title":"Using Markdown in HTML Tables","text":"kableExtra popular package creating styling tables R. produces raw HTML specific support Quarto’s HTML table parsing. However, can use helper functions insert Markdown content cells, allows inserting raw HTML content table cells (setting escape = FALSE keep raw HTML -). complex example combines features create complete HTML table Markdown content:","code":"library(kableExtra)  # Create a data frame with different types of content complex_table <- data.frame(   Feature = c(\"Formatting\", \"Math\", \"References\", \"Media\"),   Example = c(     tbl_qmd_span(\"**Bold**, *italic*, and `code`\"),     tbl_qmd_span(\"$\\\\int_{a}^{b} f(x) \\\\, dx$\"),     tbl_qmd_span(\"See @tbl-kable-equation for example of a table\"),     tbl_qmd_div(       \"{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}\",       display = \"[Video Player]\"     )   ),   Notes = c(     \"Basic markdown formatting\",     \"LaTeX math expressions\",     \"Cross-references to other document elements\",     \"Embedded media using shortcodes\"   ) )  # Create and style the table kbl(complex_table, format = \"html\", escape = FALSE) |>   kable_classic() |>   column_spec(2, width = \"40%\") |>   row_spec(0, bold = TRUE, background = \"#f8f8f8\")"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"using-with-flextable","dir":"Articles","previous_headings":"","what":"Using with flextable","title":"Using Markdown in HTML Tables","text":"design, flextable support inserting raw HTML content cells. Using tbl_qmd_span() tbl_qmd_div() functions directly flextable work expected. Unfortunately, flextable yet integrate Quarto’s HTML table parsing features, allow marking cell content Markdown processed Quarto. Quarto team working flextable developers find way support future.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"using-with-gt","dir":"Articles","previous_headings":"","what":"Using with gt","title":"Using Markdown in HTML Tables","text":"gt package provides way create tables rich formatting. gt allows inserting raw HTML content table cells built-support Quarto’s HTML table parsing. uses data-qmd attribute internally mark cells contain Markdown content. table example , using gt quarto R package functions. fmt_passthrough() used allow raw HTML content table cells, escape = FALSE set avoid escaping HTML content: However, gt already built-support rendering Markdown content, can use directly without needing tbl_qmd_span() tbl_qmd_div() functions. example built-support Markdown content gt: gt::fmt_markdown() aware Quarto context internally use data-qmd attribute render Markdown content correctly Quarto processes document.","code":"library(gt) gt(complex_table) |>   fmt_passthrough(columns = \"Example\", escape = FALSE) data.frame(   Feature = c(\"Formatting\", \"Math\", \"References\", \"Media\"),   Example = c(     \"**Bold**, *italic*, and `code`\",     \"$\\\\int_{a}^{b} f(x) \\\\, dx$\",     \"See @tbl-kable-equation for example of a table\",     \"{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}\"   ),   Notes = c(     \"Basic markdown formatting\",     \"LaTeX math expressions\",     \"Cross-references to other document elements\",     \"Embedded media using shortcodes\"   ) ) |>   gt() |>   fmt_markdown(columns = \"Example\")"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"using-with-tinytable","dir":"Articles","previous_headings":"","what":"Using with tinytable","title":"Using Markdown in HTML Tables","text":"tinytable package website (https://vincentarelbundock.github.io/tinytable/): > tinytable small powerful R package draw beautiful tables variety formats: HTML, LaTeX, Word, PDF, PNG, Markdown, Typst. default, tinytable deactivates Quarto HTML table processing. design choice tinytable formatting affected Quarto’s HTML table processing. , previous table look like : Note display value video shortcode used, shortcode processed Quarto case. Quarto HTML table processing can re-enabled tinytable, case, handle data-qmd attribute internally, functions tbl_qmd_span() tbl_qmd_div() needed. Setting option opt-Quarto HTML table processing tables created tinytable. allows table using tbl_qmd_span() tbl_qmd_div() processed correctly Quarto. Let’s unset option: Note tinytable supports data-qmd attributes internally, functions tbl_qmd_span() tbl_qmd_div() needed using tinytable. can use tt() function directly Markdown content table cells, mark cells using Quarto Markdown processing.","code":"library(tinytable)  tt(complex_table) options(tinytable_quarto_disable_processing = FALSE) tt(complex_table) options(tinytable_quarto_disable_processing = NULL) data.frame(   Feature = c(\"Formatting\", \"Math\", \"References\", \"Media\"),   Example = c(     \"**Bold**, *italic*, and `code`\",     \"$\\\\int_{a}^{b} f(x) \\\\, dx$\",     \"See @tbl-kable-equation for example of a table\",     \"{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}\"   ),   Notes = c(     \"Basic markdown formatting\",     \"LaTeX math expressions\",     \"Cross-references to other document elements\",     \"Embedded media using shortcodes\"   ) ) |>   tt() |>   format_tt(j = \"Example\", quarto = TRUE)"},{"path":"https://quarto-dev.github.io/quarto-r/articles/markdown-html-tables.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Using Markdown in HTML Tables","text":"table helper functions package make easy include Markdown content HTML tables working Quarto documents. useful users get unblocked using package provides HTML tables doesn’t already support Quarto processing. Hopefully, developers also find useful simplify process users creating tables rich content. already happening gt tinytable packages, built-support Markdown content tables marking cells data-qmd attribute internally user. information tables Quarto, see Quarto documentation tables.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/articles/publishing.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Publishing","text":"quarto package includes several functions enable publish static interactive documents, websites, books Posit Connect shinyapps.io. publishing Posit Connect, simple content publishing (local rendering) well code publishing (rendering Connect) supported.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/articles/publishing.html","id":"accounts","dir":"Articles","previous_headings":"","what":"Accounts","title":"Publishing","text":"publishing Posit Connect shinyapps.io ensure account configured publishing. Posit Connect, use rsconnect::connectUser() function server publishing . example: ’ll prompted authoring account web browser. shinyapps.io, use rsconnect::setAccountInfo() function. example: Note can copy paste code Tokens page shinyapps.io admin panel.","code":"rsconnect::connectUser(server = \"rsc.example.com\") rsconnect::setAccountInfo(name = 'norahjones', token = 'AB6783FD23', secret = '36x+k0bBy6W')"},{"path":"https://quarto-dev.github.io/quarto-r/articles/publishing.html","id":"documents","dir":"Articles","previous_headings":"","what":"Documents","title":"Publishing","text":"Use quarto_publish_doc() function publish single document Posit Connect. Note first time publish specify server account want use publishing. example: Subsequent updates document don’t need specify server account: example renders content locally publishes just content server. can also render server (uploading source code required render). might want order create scheduled versions report update automatically underlying data changes. , add render = \"server\" argument:","code":"library(quarto) quarto_publish_doc(\"document.qmd\", server = \"rsc.example.com\", account = \"njones\") quarto_publish_doc(\"document.qmd\") quarto_publish_doc(\"document.qmd\",                     server = \"rsc.example.com\", account = \"njones\",                    render = \"server\")"},{"path":"https://quarto-dev.github.io/quarto-r/articles/publishing.html","id":"websites","dir":"Articles","previous_headings":"","what":"Websites","title":"Publishing","text":"Use quarto_publish_site() function publish website book Posit Connect. Note first time publish specify server account want use publishing. example: Subsequent updates site don’t need specify server account: example renders content locally publishes just content server. can also render server (uploading source code required render). might want order create scheduled versions website update automatically underlying data changes. , add render = \"server\" argument:","code":"library(quarto) quarto_publish_site(server = \"rsc.example.com\", account = \"njones\") quarto_publish_site() quarto_publish_site(server = \"rsc.example.com\", account = \"njones\",                     render = \"server\")"},{"path":"https://quarto-dev.github.io/quarto-r/articles/publishing.html","id":"interactive-docs","dir":"Articles","previous_headings":"","what":"Interactive Docs","title":"Publishing","text":"can publish Shiny interactive documents either Posit Connect shinyapps.io. publish Posit Connect, specify server account want use publishing (required first publish ). example: publish shinyapps.io, use server = \"shinyapps.io\": services, subsequent publishes need provide server account:","code":"library(quarto) quarto_publish_app(\"shiny.qmd\", server = \"rsc.example.com\", account = \"njones\") quarto_publish_app(\"shiny.qmd\", server = \"shinyapps.io\") quarto_publish_app(\"shiny.qmd\")"},{"path":"https://quarto-dev.github.io/quarto-r/articles/r-scripts.html","id":"extracting-r-code-from-quarto-documents","dir":"Articles","previous_headings":"","what":"Extracting R Code from Quarto Documents","title":"Working with R Scripts","text":"  qmd_to_r_script() function allows extract R code cells .qmd files convert .R scripts. particularly useful : Creating standalone R scripts Quarto documents Sharing R code without narrative text Converting Quarto documents use environments don’t support .qmd files function preserves important metadata Quarto document: YAML metadata converted spin-style headers (#' ---) Chunk options preserved using Quarto’s #| syntax also important limitations: R code cells extracted; languages (Python, Julia, etc.) ignored Let’s create sample Quarto document demonstrate: Now let’s extract R code: Let’s see generated R script looks like: working documents contain multiple languages (R, Python, JavaScript, etc.), qmd_to_r_script() : Extract R code cells Provide informative messages non-R cells Return NULL R cells found function inform non-R cells extract R code: resulting R script contain R code cell:","code":"library(quarto)  # Extract R code from a Quarto document to an R script # It will output my-analysis.R qmd_to_r_script(\"my-analysis.qmd\"\") example.qmd # Sample Quarto document content --- title: \"My Analysis\" author: \"Data Scientist\" format: html ---  # Introduction  This is a sample analysis.  ```{r} #| label: setup #| message: false library(ggplot2) library(dplyr) ```  ```{r} #| label: data-viz #| fig-width: 8 #| fig-height: 6 mtcars |>   ggplot(aes(x = wt, y = mpg)) +   geom_point() +   geom_smooth() ``` library(quarto)  # Extract R code to a script r_script <- qmd_to_r_script(qmd_file) example.R #' --- #' title: My Analysis #' author: Data Scientist #' format: html #' --- #'   #| label: setup #| message: false library(ggplot2) library(dplyr)  #| label: data-viz #| fig-width: 8 #| fig-height: 6 mtcars |>   ggplot(aes(x = wt, y = mpg)) +   geom_point() +   geom_smooth() mixed.qmd --- title: \"Mixed Language Analysis\" format: html ---  ```{r} #| label: r-analysis data <- mtcars summary(data) ```  ```{python} #| label: python-analysis import pandas as pd df = pd.DataFrame({\"x\": [1, 2, 3], \"y\": [4, 5, 6]}) print(df.head()) ```  ```{ojs} //| label: js-viz Plot.plot({   marks: [Plot.dot(data, {x: \"x\", y: \"y\"})] }) ``` # Extract R code from mixed-language document mixed_r_script <- qmd_to_r_script(mixed_qmd) #> Extracting only R code cells from #> '/tmp/RtmpzIO1Gm/quarto-r-scripts-vignette25ae561fbaac/mixed.qmd'. #> → Other languages will be ignored (found python and ojs). mixed.R #' --- #' title: Mixed Language Analysis #' format: html #' --- #'   #| label: r-analysis data <- mtcars summary(data)"},{"path":"https://quarto-dev.github.io/quarto-r/articles/r-scripts.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Working with R Scripts","text":"function preserves important metadata Quarto document: YAML metadata converted spin-style headers (#' ---) Chunk options preserved using Quarto’s #| syntax also important limitations: R code cells extracted; languages (Python, Julia, etc.) ignored","code":"library(quarto)  # Extract R code from a Quarto document to an R script # It will output my-analysis.R qmd_to_r_script(\"my-analysis.qmd\"\")"},{"path":"https://quarto-dev.github.io/quarto-r/articles/r-scripts.html","id":"example-converting-a-simple-quarto-document","dir":"Articles","previous_headings":"","what":"Example: Converting a Simple Quarto Document","title":"Working with R Scripts","text":"Let’s create sample Quarto document demonstrate: Now let’s extract R code: Let’s see generated R script looks like:","code":"example.qmd # Sample Quarto document content --- title: \"My Analysis\" author: \"Data Scientist\" format: html ---  # Introduction  This is a sample analysis.  ```{r} #| label: setup #| message: false library(ggplot2) library(dplyr) ```  ```{r} #| label: data-viz #| fig-width: 8 #| fig-height: 6 mtcars |>   ggplot(aes(x = wt, y = mpg)) +   geom_point() +   geom_smooth() ``` library(quarto)  # Extract R code to a script r_script <- qmd_to_r_script(qmd_file) example.R #' --- #' title: My Analysis #' author: Data Scientist #' format: html #' --- #'   #| label: setup #| message: false library(ggplot2) library(dplyr)  #| label: data-viz #| fig-width: 8 #| fig-height: 6 mtcars |>   ggplot(aes(x = wt, y = mpg)) +   geom_point() +   geom_smooth()"},{"path":"https://quarto-dev.github.io/quarto-r/articles/r-scripts.html","id":"working-with-mixed-language-documents","dir":"Articles","previous_headings":"","what":"Working with Mixed-Language Documents","title":"Working with R Scripts","text":"working documents contain multiple languages (R, Python, JavaScript, etc.), qmd_to_r_script() : Extract R code cells Provide informative messages non-R cells Return NULL R cells found function inform non-R cells extract R code: resulting R script contain R code cell:","code":"mixed.qmd --- title: \"Mixed Language Analysis\" format: html ---  ```{r} #| label: r-analysis data <- mtcars summary(data) ```  ```{python} #| label: python-analysis import pandas as pd df = pd.DataFrame({\"x\": [1, 2, 3], \"y\": [4, 5, 6]}) print(df.head()) ```  ```{ojs} //| label: js-viz Plot.plot({   marks: [Plot.dot(data, {x: \"x\", y: \"y\"})] }) ``` # Extract R code from mixed-language document mixed_r_script <- qmd_to_r_script(mixed_qmd) #> Extracting only R code cells from #> '/tmp/RtmpzIO1Gm/quarto-r-scripts-vignette25ae561fbaac/mixed.qmd'. #> → Other languages will be ignored (found python and ojs). mixed.R #' --- #' title: Mixed Language Analysis #' format: html #' --- #'   #| label: r-analysis data <- mtcars summary(data)"},{"path":"https://quarto-dev.github.io/quarto-r/articles/r-scripts.html","id":"adding-yaml-metadata-to-r-scripts","dir":"Articles","previous_headings":"","what":"Adding YAML Metadata to R Scripts","title":"Working with R Scripts","text":"add_spin_preamble() function helps add YAML metadata existing R scripts, making compatible Quarto’s script rendering feature. Now add YAML preamble: updated script now YAML metadata: script can now rendered Quarto:","code":"# Add a simple title to an R script add_spin_preamble(\"my-script.R\", title = \"My Analysis\")  # Add custom YAML metadata add_spin_preamble(\"my-script.R\",                    preamble = list(                     title = \"Advanced Analysis\",                     author = \"Data Scientist\",                     format = \"html\",                     execute = list(echo = TRUE, warning = FALSE)                   )) simple.R # Load required libraries library(ggplot2) library(dplyr)  # Analyze mtcars data mtcars |>   group_by(cyl) |>   summarise(avg_mpg = mean(mpg), .groups = \"drop\")  # Create visualization ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +   geom_boxplot() +   labs(title = \"MPG by Number of Cylinders\",        x = \"Cylinders\", y = \"Miles per Gallon\") # Add YAML metadata for Quarto rendering add_spin_preamble(simple_script,                    title = \"Car Analysis\",                   preamble = list(                     author = \"R User\",                     format = list(                       html = list(                         code_fold = TRUE,                         theme = \"cosmo\"                       )                     )                   )) #> Added spin preamble to #> '/tmp/RtmpzIO1Gm/quarto-r-scripts-vignette25ae561fbaac/simple.R'. simple.R #' --- #' author: R User #' format: #'   html: #'     code_fold: true #'     theme: cosmo #' title: Car Analysis #' --- #'   # Load required libraries library(ggplot2) library(dplyr)  # Analyze mtcars data mtcars |>   group_by(cyl) |>   summarise(avg_mpg = mean(mpg), .groups = \"drop\")  # Create visualization ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +   geom_boxplot() +   labs(title = \"MPG by Number of Cylinders\",        x = \"Cylinders\", y = \"Miles per Gallon\") # Render the R script as a Quarto document quarto_render(simple_script)"},{"path":"https://quarto-dev.github.io/quarto-r/articles/r-scripts.html","id":"basic-usage-1","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Working with R Scripts","text":"","code":"# Add a simple title to an R script add_spin_preamble(\"my-script.R\", title = \"My Analysis\")  # Add custom YAML metadata add_spin_preamble(\"my-script.R\",                    preamble = list(                     title = \"Advanced Analysis\",                     author = \"Data Scientist\",                     format = \"html\",                     execute = list(echo = TRUE, warning = FALSE)                   ))"},{"path":"https://quarto-dev.github.io/quarto-r/articles/r-scripts.html","id":"example-preparing-a-script-for-quarto-rendering","dir":"Articles","previous_headings":"","what":"Example: Preparing a Script for Quarto Rendering","title":"Working with R Scripts","text":"Now add YAML preamble: updated script now YAML metadata: script can now rendered Quarto:","code":"simple.R # Load required libraries library(ggplot2) library(dplyr)  # Analyze mtcars data mtcars |>   group_by(cyl) |>   summarise(avg_mpg = mean(mpg), .groups = \"drop\")  # Create visualization ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +   geom_boxplot() +   labs(title = \"MPG by Number of Cylinders\",        x = \"Cylinders\", y = \"Miles per Gallon\") # Add YAML metadata for Quarto rendering add_spin_preamble(simple_script,                    title = \"Car Analysis\",                   preamble = list(                     author = \"R User\",                     format = list(                       html = list(                         code_fold = TRUE,                         theme = \"cosmo\"                       )                     )                   )) #> Added spin preamble to #> '/tmp/RtmpzIO1Gm/quarto-r-scripts-vignette25ae561fbaac/simple.R'. simple.R #' --- #' author: R User #' format: #'   html: #'     code_fold: true #'     theme: cosmo #' title: Car Analysis #' --- #'   # Load required libraries library(ggplot2) library(dplyr)  # Analyze mtcars data mtcars |>   group_by(cyl) |>   summarise(avg_mpg = mean(mpg), .groups = \"drop\")  # Create visualization ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +   geom_boxplot() +   labs(title = \"MPG by Number of Cylinders\",        x = \"Cylinders\", y = \"Miles per Gallon\") # Render the R script as a Quarto document quarto_render(simple_script)"},{"path":"https://quarto-dev.github.io/quarto-r/articles/r-scripts.html","id":"integration-with-existing-workflows","dir":"Articles","previous_headings":"","what":"Integration with Existing Workflows","title":"Working with R Scripts","text":"functions work seamlessly quarto package functions:","code":"# Complete workflow example library(quarto)  # 1. Extract R code from Quarto document extracted_script <- qmd_to_r_script(\"analysis.qmd\", output = \"analysis.R\")  # 2. Add additional metadata if needed add_spin_preamble(extracted_script,                    title = \"Extracted Analysis\",                   preamble = list(format = \"pdf\"))  # 3. Render the script quarto_render(extracted_script)  # 4. Preview the output quarto_preview(extracted_script)"},{"path":"https://quarto-dev.github.io/quarto-r/articles/r-scripts.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Working with R Scripts","text":"qmd_to_r_script() add_spin_preamble() functions provide powerful toolkit working R scripts Quarto workflows. Whether ’re extracting code existing documents preparing scripts Quarto rendering, functions help bridge gap narrative documents standalone scripts. advanced usage additional options, see function documentation ?qmd_to_r_script ?add_spin_preamble.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/articles/theme-helpers.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Theme Helpers","text":"quarto package includes functions help theme plotting table packages, example provide light dark renderings. functions return theme objects functions, applied differently depending package. vignette demonstrates adding background foreground colors outputs package. simple helper functions get started. need customize , functions can copied quarto-r.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/articles/theme-helpers.html","id":"flextable","dir":"Articles","previous_headings":"","what":"flextable","title":"Theme Helpers","text":"Demonstrates flextable green foreground yellow background. Air quality Time Ozone Solar.R Wind Temp Month Day 19 99 13.8 59 5 8 23 299 8.6 65 5 7 28  14.9 66 5 6 12 149 12.6 74 5 3  194 8.6 69 5 10 41 190 7.4 67 5 1 18 313 11.5 62 5 4   14.3 56 5 5 36 118 8.0 72 5 2 8 19 20.1 61 5 9 Daily air quality measurements New York, May September 1973.","code":"library(flextable) library(quarto)  yellow_green_theme <- theme_colors_flextable(\"#e3e5a9\", \"#165b26\")  ft <- flextable(airquality[ sample.int(10),]) ft <- add_header_row(ft,   colwidths = c(4, 2),   values = c(\"Air quality\", \"Time\") ) ft <- theme_vanilla(ft) ft <- add_footer_lines(ft, \"Daily air quality measurements in New York, May to September 1973.\") ft <- color(ft, part = \"footer\", color = \"#666666\") ft <- set_caption(ft, caption = \"New York Air Quality Measurements\")  ft |> yellow_green_theme()"},{"path":"https://quarto-dev.github.io/quarto-r/articles/theme-helpers.html","id":"ggiraph","dir":"Articles","previous_headings":"","what":"ggiraph","title":"Theme Helpers","text":"Demonstrates ggiraph interactive plot deep blue background mauve foreground.","code":"library(quarto) library(ggplot2) library(ggiraph)  blue_mauve_theme = theme_colors_ggplot2(\"#111038\", \"#E0B0FF\")  cars <- ggplot(mtcars, aes(mpg, wt)) +   geom_point_interactive(aes(colour = factor(cyl), tooltip = rownames(mtcars))) +   scale_colour_manual(values = c(\"darkorange\", \"purple\", \"cyan4\"))  girafe(ggobj = cars + blue_mauve_theme)"},{"path":"https://quarto-dev.github.io/quarto-r/articles/theme-helpers.html","id":"ggplot2","dir":"Articles","previous_headings":"","what":"ggplot2","title":"Theme Helpers","text":"Demonstrates ggplot2 plot near-black background green-grey foreground.","code":"library(quarto) library(ggplot2)  black_greyn <- theme_colors_ggplot2(\"#050411\", \"#8faf8e\")  cars <- ggplot(mtcars, aes(mpg, wt)) +   geom_point(aes(colour = factor(cyl))) +   scale_colour_manual(values = c(\"darkorange\", \"purple\", \"cyan4\"))  cars + black_greyn"},{"path":"https://quarto-dev.github.io/quarto-r/articles/theme-helpers.html","id":"gt","dir":"Articles","previous_headings":"","what":"gt","title":"Theme Helpers","text":"Demonstrates gt table light green background black foreground.","code":"library(gt) library(quarto) library(dplyr)  green_black_theme <- theme_colors_gt(\"#a5f7d6\", \"#020202\")  islands_tbl <-   tibble(     name = names(islands),     size = islands   ) |>   slice_max(size, n = 10)  gt(islands_tbl) |> green_black_theme()"},{"path":"https://quarto-dev.github.io/quarto-r/articles/theme-helpers.html","id":"plotly","dir":"Articles","previous_headings":"","what":"plotly","title":"Theme Helpers","text":"Demonstrates heatmaply interactive heatmap dark green background background light blue foreground.","code":"library(quarto) library(plotly)  green_blue_theme <- theme_colors_plotly(\"#293a0a\", \"#a5eff7\")  fig <- plot_ly(iris, x = ~Species, y = ~Sepal.Width, type = \"violin\",                box = list(visible = TRUE),                meanline = list(visible = TRUE),                points = \"all\")  fig |> green_blue_theme()"},{"path":"https://quarto-dev.github.io/quarto-r/articles/theme-helpers.html","id":"thematic","dir":"Articles","previous_headings":"","what":"thematic","title":"Theme Helpers","text":"Demonstrates patchwork plot dark red background light grey foreground.","code":"library(ggplot2) library(quarto) library(patchwork)  darkred_grey_theme <- theme_colors_thematic(\"#560115\", \"#ddeeee\");  #generate three scatterplots plot1 <- ggplot(mtcars, aes(mpg, wt)) +   geom_point()  plot2 <- ggplot(mtcars, aes(mpg, disp)) +   geom_point()  plot3 <- ggplot(mtcars, aes(mpg, hp)) +   geom_point()  #display all three scatterplots in same graphic darkred_grey_theme() plot1 + plot2 + plot3"},{"path":"https://quarto-dev.github.io/quarto-r/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"JJ Allaire. Author. Christophe Dervieux. Maintainer, author. Posit Software, PBC. Copyright holder, funder. Gordon Woodhull. Contributor.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Allaire J, Dervieux C (2025). quarto: R Interface 'Quarto' Markdown Publishing System. R package version 1.4.4.9027, https://github.com/quarto-dev/quarto-r.","code":"@Manual{,   title = {quarto: R Interface to 'Quarto' Markdown Publishing System},   author = {JJ Allaire and Christophe Dervieux},   year = {2025},   note = {R package version 1.4.4.9027},   url = {https://github.com/quarto-dev/quarto-r}, }"},{"path":"https://quarto-dev.github.io/quarto-r/index.html","id":"quarto-","dir":"","previous_headings":"","what":"R Interface to Quarto Markdown Publishing System","title":"R Interface to Quarto Markdown Publishing System","text":"Quarto open-source scientific technical publishing system built Pandoc. quarto package provides R interface frequently used operations Quarto Command Line Interface (CLI). package requirement using Quarto R. Rather, provides R interface common Quarto operations users prefer work R console rather terminal, package authors want interface Quarto using scripts. using Quarto R package, install Quarto CLI https://quarto.org/docs/get-started/.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/index.html","id":"installing-the-package","dir":"","previous_headings":"","what":"Installing the package","title":"R Interface to Quarto Markdown Publishing System","text":"Latest released version CRAN Latest dev version Github Latest build dev version r-universe Look Functions Reference page see list functions available package.","code":"# latest release version  install.packages(\"quarto\") # dev version pak::pak(\"quarto-dev/quarto-r\") # or remotes::install_github(\"quarto-dev/quarto-r\") install.packages('quarto', repos = c('https://quarto-dev.r-universe.dev', 'https://cloud.r-project.org'))"},{"path":"https://quarto-dev.github.io/quarto-r/reference/add_spin_preamble.html","id":null,"dir":"Reference","previous_headings":"","what":"Add spin preamble to R script — add_spin_preamble","title":"Add spin preamble to R script — add_spin_preamble","text":"Adds minimal spin preamble R script file one already exist. preamble includes title derived filename formatted YAML block suitable preprended #' knitr::spin().","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/add_spin_preamble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add spin preamble to R script — add_spin_preamble","text":"","code":"add_spin_preamble(script, title = NULL, preamble = NULL, quiet = FALSE)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/add_spin_preamble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add spin preamble to R script — add_spin_preamble","text":"script Path R script file title Custom title preamble. provided, overrides title preamble list. NULL, uses preamble$title filename fallback. preamble Named list YAML metadata include preamble. title parameter takes precedence preamble$title provided. quiet TRUE, suppresses messages warnings.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/add_spin_preamble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add spin preamble to R script — add_spin_preamble","text":"Invisibly returns script path modified, otherwise invisible NULL","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/add_spin_preamble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add spin preamble to R script — add_spin_preamble","text":"useful prepare R scripts use Quarto Script rendering support. See https://quarto.org/docs/computations/render-scripts.html#knitr","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/add_spin_preamble.html","id":"preamble-format","dir":"Reference","previous_headings":"","what":"Preamble format","title":"Add spin preamble to R script — add_spin_preamble","text":"script named analysis.R, function adds preamble default:   minimal preamble required Quarto Script rendering, Engine Bindings works.","code":"#' --- #' title: analysis #' --- #'  # Original script content starts here"},{"path":"https://quarto-dev.github.io/quarto-r/reference/add_spin_preamble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add spin preamble to R script — add_spin_preamble","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with default title add_spin_preamble(\"analysis.R\")  # Custom title add_spin_preamble(\"analysis.R\", title = \"My Analysis\")  # Custom preamble with multiple fields add_spin_preamble(\"analysis.R\", preamble = list(   title = \"Advanced Analysis\",   author = \"John Doe\",   date = Sys.Date(),   format = \"html\" ))  # Title parameter overrides preamble title add_spin_preamble(\"analysis.R\",   title = \"Final Title\",  # This takes precedence   preamble = list(     title = \"Ignored Title\",     author = \"John Doe\"   ) ) } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/check_newer_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for newer version of Quarto — check_newer_version","title":"Check for newer version of Quarto — check_newer_version","text":"Checks newer version Quarto available informs user current version status. function compares current Quarto version latest stable prerelease versions available online.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/check_newer_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for newer version of Quarto — check_newer_version","text":"","code":"check_newer_version(version = quarto_version(), verbose = TRUE)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/check_newer_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for newer version of Quarto — check_newer_version","text":"version Character string specifying Quarto version check. Defaults currently installed version detected quarto_version(). Use \"99.9.9\" indicate development version. verbose Logical indicating whether print informational messages. Defaults TRUE. FALSE, function runs silently returns logical result.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/check_newer_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for newer version of Quarto — check_newer_version","text":"Invisibly returns logical value: TRUE update available FALSE update needed using development version function primarily called side effects printing informational messages (verbose = TRUE).","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/check_newer_version.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for newer version of Quarto — check_newer_version","text":"function handles three scenarios: Development version (99.9.9): Skips version check informational message Prerelease version: Compares latest prerelease informs updates Stable version: Compares latest stable version suggests updates needed Version information fetched Quarto's download JSON endpoints cached current session 24 hours avoid repeated network requests.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/check_newer_version.html","id":"network-requirements","dir":"Reference","previous_headings":"","what":"Network Requirements","title":"Check for newer version of Quarto — check_newer_version","text":"function requires internet connection fetch latest version information quarto.org. network request fails, error thrown.","code":""},{"path":[]},{"path":"https://quarto-dev.github.io/quarto-r/reference/check_newer_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for newer version of Quarto — check_newer_version","text":"","code":"# Check current Quarto version check_newer_version() #> ℹ You are using prerelease version of Quarto: 1.8.17. #> You are using the latest prerelease version.  # Check a specific version check_newer_version(\"1.7.30\") #> ℹ You are using an older version of Quarto: 1.7.30. #>   The latest stable version is: 1.7.32. #> → You can download new version from https://quarto.org/docs/download/ or your #>   preferred package manager if available.  # Check development version (will skip check) check_newer_version(\"99.9.9\") #> ℹ Skipping version check for development version. #> → Please update using development mode.  # Check silently without messages result <- check_newer_version(verbose = FALSE) if (result) {   message(\"Update available!\") }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/detect_bookdown_crossrefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Bookdown Cross-References for Quarto Migration — detect_bookdown_crossrefs","title":"Detect Bookdown Cross-References for Quarto Migration — detect_bookdown_crossrefs","text":"Scans R Markdown Quarto files identify bookdown cross-references need converted Quarto syntax. Provides detailed reports guidance migrating bookdown Quarto.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/detect_bookdown_crossrefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Bookdown Cross-References for Quarto Migration — detect_bookdown_crossrefs","text":"","code":"detect_bookdown_crossrefs(path = \".\", verbose = FALSE)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/detect_bookdown_crossrefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Bookdown Cross-References for Quarto Migration — detect_bookdown_crossrefs","text":"path Character string. Path single .Rmd .qmd file, directory containing files. Defaults current directory (\".\"). Typically used Bookdown projects R Markdown documents using bookdown output formats (e.g., bookdown::pdf_document2). verbose Logical. TRUE, shows detailed line--line breakdown cross-references found. FALSE (default), shows compact summary file.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/detect_bookdown_crossrefs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Bookdown Cross-References for Quarto Migration — detect_bookdown_crossrefs","text":"Invisibly returns list detected cross-references file locations, line numbers, conversion details. Returns NULL cross-references found.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/detect_bookdown_crossrefs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect Bookdown Cross-References for Quarto Migration — detect_bookdown_crossrefs","text":"function helps users migrate bookdown Quarto detecting cross-references use bookdown syntax need manual conversion.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/detect_bookdown_crossrefs.html","id":"detected-cross-reference-types","dir":"Reference","previous_headings":"","what":"Detected Cross-Reference Types","title":"Detect Bookdown Cross-References for Quarto Migration — detect_bookdown_crossrefs","text":"Auto-detectable conversions: Figures: \\@ref(fig:label)-> @fig-label Tables: \\@ref(tab:label) -> @tbl-label Equations: \\@ref(eq:label) -> @eq-label Sections: \\@ref(label) -> @sec-label Theorems: \\@ref(thm:label) -> @thm-label (also lem, cor, prp, def, exm, exr) Manual conversion required: Numbered equations: (\\#eq:label) -> requires equation restructuring Theorem blocks: Need explicit Quarto div syntax conversion three formats several bookdown versions supported: Old syntax label: {theorem, label=\"thm:label\"} Old syntax without label: {theorem chunk_name} New div syntax: ::: {.theorem #thm-label} Section headers: Need explicit {#sec-label} IDs Figure labels: Need explicit #| label: fig-label code chunks Table labels: Need explicit #| label: tbl-label code chunks Unsupported Quarto: Conjecture (cnj) Hypothesis (hyp) references","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/detect_bookdown_crossrefs.html","id":"adaptive-guidance","dir":"Reference","previous_headings":"","what":"Adaptive Guidance","title":"Detect Bookdown Cross-References for Quarto Migration — detect_bookdown_crossrefs","text":"function provides context-aware warnings show syntax patterns actually found files. example, project uses old theorem syntax without labels, see guidance specific pattern, possible variations.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/detect_bookdown_crossrefs.html","id":"output-modes","dir":"Reference","previous_headings":"","what":"Output Modes","title":"Detect Bookdown Cross-References for Quarto Migration — detect_bookdown_crossrefs","text":"Default (verbose = FALSE): Compact file--file summary Cross-reference counts type Manual conversion requirements summary Verbose (verbose = TRUE): Detailed line--line breakdown Exact bookdown -> Quarto syntax transformations Context-aware conversion guidance showing relevant syntax patterns Comprehensive examples documentation links","code":""},{"path":[]},{"path":"https://quarto-dev.github.io/quarto-r/reference/detect_bookdown_crossrefs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect Bookdown Cross-References for Quarto Migration — detect_bookdown_crossrefs","text":"","code":"if (FALSE) { # \\dontrun{ # Scan current directory (compact output) detect_bookdown_crossrefs()  # Scan specific file with detailed output detect_bookdown_crossrefs(\"my-document.Rmd\", verbose = TRUE)  # Scan directory with context-aware guidance detect_bookdown_crossrefs(\"path/to/bookdown/project\", verbose = TRUE) } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/find_project_root.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the root of a Quarto project — find_project_root","title":"Find the root of a Quarto project — find_project_root","text":"function checks current working directory within Quarto project looking Quarto project files (_quarto.yml _quarto.yaml). Unlike get_running_project_root(), works rendering interactive sessions.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/find_project_root.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the root of a Quarto project — find_project_root","text":"","code":"find_project_root(path = \".\")"},{"path":"https://quarto-dev.github.io/quarto-r/reference/find_project_root.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the root of a Quarto project — find_project_root","text":"path Character. Path check Quarto project files. Defaults current working directory.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/find_project_root.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the root of a Quarto project — find_project_root","text":"Character Path project root directory found, NULL","code":""},{"path":[]},{"path":"https://quarto-dev.github.io/quarto-r/reference/find_project_root.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the root of a Quarto project — find_project_root","text":"","code":"tmpdir <- tempfile() dir.create(tmpdir) find_project_root(tmpdir) #> NULL quarto_create_project(\"test-proj\", type = \"blog\", dir = tmpdir, no_prompt = TRUE, quiet = TRUE) blog_post_dir <- file.path(tmpdir, \"test-proj\", \"posts\", \"welcome\") find_project_root(blog_post_dir) #> [1] \"/tmp/RtmpcFzR6A/file20b531aed14c/test-proj\"  xfun::in_dir(blog_post_dir, {   # Check if current directory is a Quarto project or in one   !is.null(find_project_root()) }) #> [1] TRUE  # clean up unlink(tmpdir, recursive = TRUE)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/get_running_project_root.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the root of the currently running Quarto project — get_running_project_root","title":"Get the root of the currently running Quarto project — get_running_project_root","text":"function used inside cells return project root quarto_render() detecting Quarto project environment variables.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/get_running_project_root.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the root of the currently running Quarto project — get_running_project_root","text":"","code":"get_running_project_root()"},{"path":"https://quarto-dev.github.io/quarto-r/reference/get_running_project_root.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the root of the currently running Quarto project — get_running_project_root","text":"Character Quarto project root path set environment variables.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/get_running_project_root.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the root of the currently running Quarto project — get_running_project_root","text":"Quarto sets QUARTO_PROJECT_ROOT QUARTO_PROJECT_DIR environment variables executing commands within Quarto project context (e.g., quarto render, quarto preview). function detects presence. Note function return NULL running code interactively IDE (even within Quarto project directory), specific environment variables set Quarto command execution.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/get_running_project_root.html","id":"use-in-quarto-document-cells","dir":"Reference","previous_headings":"","what":"Use in Quarto document cells","title":"Get the root of the currently running Quarto project — get_running_project_root","text":"function particularly useful Quarto document cells want get project root path dynamically rendering. Cell example:","code":"```{r}`r ''`  # Get the project root path  project_root <- get_running_project_root() ```"},{"path":[]},{"path":"https://quarto-dev.github.io/quarto-r/reference/get_running_project_root.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the root of the currently running Quarto project — get_running_project_root","text":"","code":"if (FALSE) { # \\dontrun{ get_running_project_root() } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/is_using_quarto.html","id":null,"dir":"Reference","previous_headings":"","what":"Check is a directory is using quarto — is_using_quarto","title":"Check is a directory is using quarto — is_using_quarto","text":"function check directory using quarto looking _quarto.yml root least one .qmd file directory","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/is_using_quarto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check is a directory is using quarto — is_using_quarto","text":"","code":"is_using_quarto(dir = \".\", verbose = FALSE)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/is_using_quarto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check is a directory is using quarto — is_using_quarto","text":"dir directory check verbose print message result check","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/is_using_quarto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check is a directory is using quarto — is_using_quarto","text":"","code":"dir.create(tmpdir <- tempfile()) is_using_quarto(tmpdir) #> [1] FALSE file.create(file.path(tmpdir, \"_quarto.yml\")) #> [1] TRUE is_using_quarto(tmpdir) #> [1] TRUE unlink(tmpdir, recursive = TRUE)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/new_blog_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new blog post — new_blog_post","title":"Create a new blog post — new_blog_post","text":"Creates (potentially opens) index.qmd file new blog post.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/new_blog_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new blog post — new_blog_post","text":"","code":"new_blog_post(   title,   dest = NULL,   wd = NULL,   open = rlang::is_interactive(),   call = rlang::current_env(),   ... )"},{"path":"https://quarto-dev.github.io/quarto-r/reference/new_blog_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new blog post — new_blog_post","text":"title character string title post. converted title case via tools::toTitleCase(). dest character string (NULL) path within posts. default, title adapted directory name. wd optional working directory. NULL, current working used. open logical: default editor open window edit index.qmd file? call execution environment currently running function, e.g. caller_env(). function mentioned error messages source error. See call argument abort() information. ... named list values added yaml header, date, author, categories, description, etc. date provided, current date used. author provided, whoami::fullname() used get user's name.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/new_blog_post.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new blog post — new_blog_post","text":"path index file.","code":""},{"path":[]},{"path":"https://quarto-dev.github.io/quarto-r/reference/project_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path relative to project root (Quarto-aware) — project_path","title":"Get path relative to project root (Quarto-aware) — project_path","text":"function constructs file paths relative project root running Quarto context (using QUARTO_PROJECT_ROOT QUARTO_PROJECT_DIR environment variables), falls back intelligent project root detection Quarto context. experimental subject change future releases. automatic project root detection may work reliably contexts, especially projects complex directory structures running non-standard environments. explicit potentially robust approach, consider using ::i_am() declare project structure, followed ::() path construction. See examples comparison.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/project_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path relative to project root (Quarto-aware) — project_path","text":"","code":"project_path(..., root = NULL)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/project_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path relative to project root (Quarto-aware) — project_path","text":"... Character vectors path components joined root Project root directory. NULL (default), automatic detection used following hierarchy described ","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/project_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path relative to project root (Quarto-aware) — project_path","text":"character vector normalized file path relative project root.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/project_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get path relative to project root (Quarto-aware) — project_path","text":"function uses following fallback hierarchy determine project root: Quarto environment variables set Quarto commands (e.g., quarto render): QUARTO_PROJECT_ROOT environment variable (set Quarto commands) QUARTO_PROJECT_DIR environment variable (alternative Quarto variable) Fallback intelligent project root detection using xfun::proj_root() interactive sessions: _quarto.yml _quarto.yaml (Quarto project files) DESCRIPTION file Package: field (R package Project) .Rproj files Version: field (RStudio projects) Last fallback current working directory project root can determined. warning issued alert users behavior may differ interactive use Quarto rendering, case computed path may wrong.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/project_path.html","id":"use-in-quarto-document-cells","dir":"Reference","previous_headings":"","what":"Use in Quarto document cells","title":"Get path relative to project root (Quarto-aware) — project_path","text":"function particularly useful Quarto document cells want use path relative project root dynamically rendering.","code":"```{r}`r ''`  # Get a csv path from data directory in the Quarto project root  data <- project_path(\"data\", \"my_data.csv\") ```"},{"path":[]},{"path":"https://quarto-dev.github.io/quarto-r/reference/project_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path relative to project root (Quarto-aware) — project_path","text":"","code":"if (FALSE) { # \\dontrun{ # Create a dummy Quarto project structure for example tmpdir <- tempfile(\"quarto_project\") dir.create(tmpdir) quarto::quarto_create_project(   'test project', type = 'blog',   dir = tmpdir, no_prompt = TRUE, quiet = TRUE ) project_dir <- file.path(tmpdir, \"test project\")  # Simulate working within a blog post xfun::in_dir(   dir = file.path(project_dir, \"posts\", \"welcome\"), {    # Reference a data file from project root   # ../../data/my_data.csv   quarto::project_path(\"data\", \"my_data.csv\")    # Reference a script from project root   # ../../R/analysis.R   quarto::project_path(\"R\", \"analysis.R\")    # Explicitly specify root (overrides automatic detection)   # ../../data/file.csv   quarto::project_path(\"data\", \"file.csv\", root = \"../..\")    # Alternative approach using here::i_am() (potentially more robust)   # This approach requires you to declare where you are in the project:   if (requireNamespace(\"here\", quietly = TRUE)) {     # Declare that this document is in the project root or subdirectory     here::i_am(\"posts/welcome/index.qmd\")      # Now here::here() will work reliably from the project root     here::here(\"data\", \"my_data.csv\")     here::here(\"R\", \"analysis.R\")   } })  } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/qmd_to_r_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Quarto document to R script — qmd_to_r_script","title":"Convert Quarto document to R script — qmd_to_r_script","text":"Extracts R code cells Quarto document writes R script file can rendered options. Markdown text preserved, R chunk options kept comment headers using Quarto's #| syntax. function still experimental may slightly change future releases, depending feedback.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/qmd_to_r_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Quarto document to R script — qmd_to_r_script","text":"","code":"qmd_to_r_script(qmd, script = NULL)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/qmd_to_r_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Quarto document to R script — qmd_to_r_script","text":"qmd Character. Path input Quarto document (.qmd file). script Character. Path output R script file. NULL (default), script file name input file .R extension.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/qmd_to_r_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Quarto document to R script — qmd_to_r_script","text":"Invisibly returns path created R script file, NULL R code cells found.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/qmd_to_r_script.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Quarto document to R script — qmd_to_r_script","text":"function processes Quarto document : Extracting R code cells (markdown cell languages ignored) Preserving chunk options #| comment headers Adding document's YAML metadata spin-style header Creating R script can rendered options","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/qmd_to_r_script.html","id":"file-handling-","dir":"Reference","previous_headings":"","what":"File handling:","title":"Convert Quarto document to R script — qmd_to_r_script","text":"output R script already exists, function abort error Non-R code cells (e.g., Python, Julia, Observable JS) ignored R code cells found, function nothing returns NULL","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/qmd_to_r_script.html","id":"compatibility-","dir":"Reference","previous_headings":"","what":"Compatibility:","title":"Convert Quarto document to R script — qmd_to_r_script","text":"resulting R script compatible Quarto's script rendering via knitr::spin() can rendered directly quarto render script.R. See https://quarto.org/docs/computations/render-scripts.html#knitr details rendering R scripts Quarto. resulting R script uses Quarto's executable cell format #| comments preserve chunk options like echo, eval, output, etc.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/qmd_to_r_script.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Quarto document to R script — qmd_to_r_script","text":"","code":"if (FALSE) { # \\dontrun{ # Convert a Quarto document to R script qmd_to_r_script(\"my-document.qmd\") # Creates \"my-document.R\"  # Specify custom output file qmd_to_r_script(\"my-document.qmd\", script = \"extracted-code.R\") } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto-package.html","id":null,"dir":"Reference","previous_headings":"","what":"quarto: R Interface to 'Quarto' Markdown Publishing System — quarto-package","title":"quarto: R Interface to 'Quarto' Markdown Publishing System — quarto-package","text":"Convert R Markdown documents 'Jupyter' notebooks variety output formats using 'Quarto'.","code":""},{"path":[]},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"quarto: R Interface to 'Quarto' Markdown Publishing System — quarto-package","text":"Maintainer: Christophe Dervieux cderv@posit.co (ORCID) Authors: JJ Allaire jj@posit.co (ORCID) contributors: Posit Software, PBC [copyright holder, funder] Gordon Woodhull [contributor]","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_add_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Install a Quarto extensions — quarto_add_extension","title":"Install a Quarto extensions — quarto_add_extension","text":"Add extension folder project running quarto add","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_add_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install a Quarto extensions — quarto_add_extension","text":"","code":"quarto_add_extension(   extension = NULL,   no_prompt = FALSE,   quiet = FALSE,   quarto_args = NULL )"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_add_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install a Quarto extensions — quarto_add_extension","text":"extension extension install, either archive GitHub repository described documentation https://quarto.org/docs/extensions/managing.html. no_prompt prompt confirm approval download external extension. quiet Suppress warning messages, R also Quarto CLI (.e --quiet passed command line). quarto.quiet R option R_QUARTO_QUIET environment variable can used globally override function call (can useful debug tool calls quarto_* functions directly). Github Actions, always quiet = FALSE. quarto_args Character vector quarto CLI arguments append Quarto command executed function. mainly intended advanced usage useful CLI arguments yet mirrored dedicated parameter R function. See quarto render --help options.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_add_extension.html","id":"extension-trust","dir":"Reference","previous_headings":"","what":"Extension Trust","title":"Install a Quarto extensions — quarto_add_extension","text":"Quarto extensions may execute code documents rendered. Therefore, trust author extension, recommend install use extension. default no_prompt = FALSE means function ask explicit approval used interactively, disallow installation.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_add_extension.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install a Quarto extensions — quarto_add_extension","text":"","code":"if (FALSE) { # \\dontrun{ # Install a template and set up a draft document from a GitHub repository quarto_add_extension(\"quarto-ext/fontawesome\")  # Install a template and set up a draft document from a ZIP archive quarto_add_extension(\"https://github.com/quarto-ext/fontawesome/archive/refs/heads/main.zip\") } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if quarto is available and version meet some requirements — quarto_available","title":"Check if quarto is available and version meet some requirements — quarto_available","text":"function allows test Quarto available meets version requirement, min, max requirement.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if quarto is available and version meet some requirements — quarto_available","text":"","code":"quarto_available(min = NULL, max = NULL, error = FALSE)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if quarto is available and version meet some requirements — quarto_available","text":"min Minimum version expected. max Maximum version expected error TRUE, throw error Quarto available meet requirement. Default FALSE.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if quarto is available and version meet some requirements — quarto_available","text":"logical. TRUE requirement met, FALSE otherwise.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_available.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if quarto is available and version meet some requirements — quarto_available","text":"min max provided, check Quarto version -two versions. non provided (keeping default NULL ), just check Quarto availability version return FALSE found.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_available.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if quarto is available and version meet some requirements — quarto_available","text":"","code":"# Is there an active version available ? quarto_available() #> [1] TRUE # check for a minimum requirement quarto_available(min = \"1.5\") #> [1] TRUE # check for a maximum version quarto_available(max = \"1.6\") #> [1] FALSE # only returns TRUE if Pandoc version is between two bounds quarto_available(min = \"1.4\", max = \"1.6\") #> [1] FALSE"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_binary_sitrep.html","id":null,"dir":"Reference","previous_headings":"","what":"Check configurations for quarto binary used — quarto_binary_sitrep","title":"Check configurations for quarto binary used — quarto_binary_sitrep","text":"function check configuration quarto package R package detect possible difference version used RStudio IDE.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_binary_sitrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check configurations for quarto binary used — quarto_binary_sitrep","text":"","code":"quarto_binary_sitrep(verbose = TRUE, debug = FALSE)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_binary_sitrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check configurations for quarto binary used — quarto_binary_sitrep","text":"verbose FALSE, return result check. debug TRUE, print information value set configurations.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_binary_sitrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check configurations for quarto binary used — quarto_binary_sitrep","text":"TRUE package using quarto binary RStudio IDE. FALSE otherwise difference detected quarto found. Use verbose = TRUE ordebug = TRUE get detailed information.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_binary_sitrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check configurations for quarto binary used — quarto_binary_sitrep","text":"","code":"quarto_binary_sitrep(verbose = FALSE) #> [1] TRUE quarto_binary_sitrep(verbose = TRUE) #> ✔ quarto R package will use /opt/quarto/bin/quarto #> [1] TRUE quarto_binary_sitrep(debug = TRUE) #> ✔ quarto R package will use /opt/quarto/bin/quarto #> ℹ     It is configured to use the latest version found in the PATH environment variable. #> [1] TRUE"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_create_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a quarto project — quarto_create_project","title":"Create a quarto project — quarto_create_project","text":"function calls quarto create project <type> <name>. creates new directory project name, inside requested parent directory, adds starter files appropriate project type.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_create_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a quarto project — quarto_create_project","text":"","code":"quarto_create_project(   name,   type = \"default\",   dir = \".\",   title = name,   no_prompt = FALSE,   quiet = FALSE,   quarto_args = NULL )"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_create_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a quarto project — quarto_create_project","text":"name name project directory created. Special case use name = \".\" create project current directory. case provide title set project title. type type project create. Quarto 1.4, can one default, website, blog, book, manuscript, confluence. dir directory create new Quarto project, .e. parent directory. title title project. default, name project, directory name created. \"project\" name = \".\". want set different title, provide . no_prompt prompt approve creation new project folder. quiet Suppress warning messages, R also Quarto CLI (.e --quiet passed command line). quarto.quiet R option R_QUARTO_QUIET environment variable can used globally override function call (can useful debug tool calls quarto_* functions directly). Github Actions, always quiet = FALSE. quarto_args Character vector quarto CLI arguments append Quarto command executed function. mainly intended advanced usage useful CLI arguments yet mirrored dedicated parameter R function. See quarto render --help options.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_create_project.html","id":"quarto-version-required","dir":"Reference","previous_headings":"","what":"Quarto version required","title":"Create a quarto project — quarto_create_project","text":"function requires Quarto 1.4 higher. Use quarto_version() see current Quarto version.","code":""},{"path":[]},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_create_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a quarto project — quarto_create_project","text":"","code":"if (FALSE) { # \\dontrun{ # Create a new project directory in another directory quarto_create_project(\"my-first-quarto-project\", dir = \"~/tmp\")  # Create a new project directory in the current directory quarto_create_project(\"my-first-quarto-project\")  # Create a new project with a different title quarto_create_project(\"my-first-quarto-project\", title = \"My Quarto Project\")  # Create a new project inside the current directory directly quarto_create_project(\".\", title = \"My Quarto Project\") } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_inspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect Quarto Input File or Project — quarto_inspect","title":"Inspect Quarto Input File or Project — quarto_inspect","text":"Inspect Quarto project input path. Inspecting project returns config engines. Inspecting input path return formats, engine, dependent resources.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_inspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect Quarto Input File or Project — quarto_inspect","text":"","code":"quarto_inspect(input = \".\", profile = NULL, quiet = FALSE, quarto_args = NULL)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_inspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inspect Quarto Input File or Project — quarto_inspect","text":"input input file project directory inspect. profile Quarto project profile(s) use. Either character vector profile names NULL use default profile. quiet Suppress warning messages, R also Quarto CLI (.e --quiet passed command line). quarto.quiet R option R_QUARTO_QUIET environment variable can used globally override function call (can useful debug tool calls quarto_* functions directly). Github Actions, always quiet = FALSE. quarto_args Character vector quarto CLI arguments append Quarto command executed function. mainly intended advanced usage useful CLI arguments yet mirrored dedicated parameter R function. See quarto render --help options.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_inspect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect Quarto Input File or Project — quarto_inspect","text":"Named list. input files, list contains elements quarto, engines, formats, resources, fileInformation plus project file part Quarto project. projects, list contains elements quarto, dir, engines, config files.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_inspect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inspect Quarto Input File or Project — quarto_inspect","text":"","code":"if (FALSE) { # \\dontrun{ # Inspect input file file quarto_inspect(\"notebook.Rmd\")  # Inspect project quarto_inspect(\"myproject\")  # Inspect project's advanced profile quarto_inspect(   input = \"myproject\",   profile = \"advanced\" ) } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_list_extensions.html","id":null,"dir":"Reference","previous_headings":"","what":"List Installed Quarto extensions — quarto_list_extensions","title":"List Installed Quarto extensions — quarto_list_extensions","text":"List Quarto Extensions folder project running quarto list","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_list_extensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Installed Quarto extensions — quarto_list_extensions","text":"","code":"quarto_list_extensions()"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_list_extensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Installed Quarto extensions — quarto_list_extensions","text":"data frame installed extensions NULL (invisibly) extensions installed.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_list_extensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Installed Quarto extensions — quarto_list_extensions","text":"","code":"if (FALSE) { # \\dontrun{ # List Quarto Extensions in this folder or project quarto_list_extensions() } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Log debug information to a configurable file — quarto_log","title":"Log debug information to a configurable file — quarto_log","text":"function logs messages file debug mode help diagnose issues Quarto vignettes pkgdown contexts.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log debug information to a configurable file — quarto_log","text":"","code":"quarto_log(   ...,   file = NULL,   append = TRUE,   timestamp = TRUE,   prefix = \"DEBUG: \" )"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log debug information to a configurable file — quarto_log","text":"... Messages log (concatenated) file Path log file. NULL, uses get_log_file() determine file. Default ./quarto-r-debug.log configuration found. append Logical. messages appended file? Default TRUE. timestamp Logical. timestamp added? Default TRUE. prefix Character. Prefix add log entry. Default \"DEBUG: \".","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log debug information to a configurable file — quarto_log","text":"Invisibly returns TRUE logging occurred, FALSE otherwise","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_log.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log debug information to a configurable file — quarto_log","text":"Debug mode enabled automatically debugging Github Actions workflows, Quarto CLI's environment variable QUARTO_LOG_LEVEL set DEBUG.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_log.html","id":"configuration","dir":"Reference","previous_headings":"","what":"Configuration","title":"Log debug information to a configurable file — quarto_log","text":"Enable debugging messages: Set quarto.log.debug = TRUE (R_QUARTO_LOG_DEBUG = TRUE environment variable) Change log file path: Set quarto.log.file change file path (R_QUARTO_LOG_FILE environment variable) Default ./quarto-r-debug.log Automatic debug mode: Debug mode automatically debugging Github Actions workflows Quarto CLI's environment variable QUARTO_LOG_LEVEL set DEBUG","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log debug information to a configurable file — quarto_log","text":"","code":"if (FALSE) { # \\dontrun{ # Set log file via environment variable Sys.setenv(R_QUARTO_LOG_FILE = \"~/quarto-debug.log\")  # Or via option options(quarto.log.file = \"~/quarto-debug.log\")  # Enable debug mode options(quarto.log.debug = TRUE)  # Log some information quarto_log(\"Starting process\") quarto_log(\"R_LIBS:\", Sys.getenv(\"R_LIBS\")) quarto_log(\".libPaths():\", paste0(.libPaths(), collapse = \":\")) } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Path to the quarto binary — quarto_path","title":"Path to the quarto binary — quarto_path","text":"Determine path quarto binary. Uses QUARTO_PATH environment variable defined, otherwise uses Sys.().","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Path to the quarto binary — quarto_path","text":"","code":"quarto_path(normalize = TRUE)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Path to the quarto binary — quarto_path","text":"normalize TRUE (default), normalize path using base::normalizePath().","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Path to the quarto binary — quarto_path","text":"Path quarto binary (NULL found)","code":""},{"path":[]},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_preview.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarto Preview — quarto_preview","title":"Quarto Preview — quarto_preview","text":"Render preview Quarto document website project.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_preview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarto Preview — quarto_preview","text":"","code":"quarto_preview(   file = NULL,   render = \"auto\",   port = \"auto\",   host = \"127.0.0.1\",   browse = TRUE,   watch = TRUE,   navigate = TRUE,   quiet = FALSE )  quarto_preview_stop()"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_preview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quarto Preview — quarto_preview","text":"file document website project directory preview (defaults current working directory) render website preview, recent execution results computational documents used render site (optimize startup time). want perform full render prior serving pass \"\" vector specific formats render. Pass \"default\" render default format site. document preview, document rendered prior preview (pass FALSE override ). port Port listen (defaults 4848) host Hostname bind (defaults 127.0.0.1) browse Open browser preview content. Defaults using RStudio Viewer running within RStudio.Pass function (e.g. utils::browseURL override behavior). watch Watch changes automatically reload browser. navigate Automatically navigate preview browser recently rendered document. quiet Suppress warning messages, R also Quarto CLI (.e --quiet passed command line)","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_preview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quarto Preview — quarto_preview","text":"URL preview server (invisibly). can used programmatically access server location, example take screenshots webshot2 pass automation tools.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_preview.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quarto Preview — quarto_preview","text":"Automatically reloads browser input files re-rendered document resources (e.g. CSS) change.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_preview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quarto Preview — quarto_preview","text":"","code":"if (FALSE) { # \\dontrun{ # Preview the project in the current directory quarto_preview()  # Preview a document quarto_preview(\"document.qmd\")  # Preview the project in \"myproj\" directory and use external browser # (rather than RStudio Viewer) quarto_preview(\"myproj\", open = utils::browseURL)  # Capture the preview URL for programmatic use preview_url <- quarto_preview(\"document.qmd\", browse = FALSE) cat(\"Preview available at:\", preview_url, \"\\n\")  # Take a screenshot of the preview using webshot2 if (require(webshot2)) {   preview_url <- quarto_preview(\"document.qmd\", browse = FALSE)   webshot2::webshot(preview_url, \"preview.png\") }  # Stop any running quarto preview quarto_preview_stop() } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_publish_doc.html","id":null,"dir":"Reference","previous_headings":"","what":"Publish Quarto Documents — quarto_publish_doc","title":"Publish Quarto Documents — quarto_publish_doc","text":"Publish Quarto documents Posit Connect, ShinyApps, RPubs","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_publish_doc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Publish Quarto Documents — quarto_publish_doc","text":"","code":"quarto_publish_doc(   input,   name = NULL,   title = NULL,   server = NULL,   account = NULL,   render = c(\"local\", \"server\", \"none\"),   metadata = list(),   ... )  quarto_publish_app(   input = getwd(),   name = NULL,   title = NULL,   server = NULL,   account = NULL,   render = c(\"local\", \"server\", \"none\"),   metadata = list(),   ... )  quarto_publish_site(   input = getwd(),   name = NULL,   title = NULL,   server = NULL,   account = NULL,   render = c(\"local\", \"server\", \"none\"),   metadata = list(),   ... )"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_publish_doc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Publish Quarto Documents — quarto_publish_doc","text":"input input file project directory published. Defaults current working directory. name Name publishing (names must unique within account). Defaults name input. title Free-form descriptive title application. Optional; supplied, often displayed favor name. deploying new document, may supply title receive auto-generated name account, server Uniquely identify remote server either user account, server name, . neither supplied, multiple options, prompted pick one. Use accounts() see full list available options. render local render locally publishing; server render server; none use whatever rendered content currently exists locally. (defaults local) metadata Additional metadata fields save deployment record. fields returned subsequent calls deployments(). Multi-value fields recorded comma-separated values returned form. Custom value serialization responsibility caller. ... Named parameters pass along rsconnect::deployApp()","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_publish_doc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Publish Quarto Documents — quarto_publish_doc","text":"","code":"if (FALSE) { # \\dontrun{ library(quarto) quarto_publish_doc(\"mydoc.qmd\") quarto_publish_app(server = \"shinyapps.io\") quarto_publish_site(server = \"rstudioconnect.example.com\") } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_remove_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a Quarto extensions — quarto_remove_extension","title":"Remove a Quarto extensions — quarto_remove_extension","text":"Remove extension folder project running quarto remove","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_remove_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a Quarto extensions — quarto_remove_extension","text":"","code":"quarto_remove_extension(   extension = NULL,   no_prompt = FALSE,   quiet = FALSE,   quarto_args = NULL )"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_remove_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a Quarto extensions — quarto_remove_extension","text":"extension extension name remove, quarto remove <extension-name>. no_prompt prompt confirm approval download external extension. quiet Suppress warning messages, R also Quarto CLI (.e --quiet passed command line). quarto.quiet R option R_QUARTO_QUIET environment variable can used globally override function call (can useful debug tool calls quarto_* functions directly). Github Actions, always quiet = FALSE. quarto_args Character vector quarto CLI arguments append Quarto command executed function. mainly intended advanced usage useful CLI arguments yet mirrored dedicated parameter R function. See quarto render --help options.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_remove_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a Quarto extensions — quarto_remove_extension","text":"Returns invisibly TRUE extension removed, FALSE otherwise.","code":""},{"path":[]},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_remove_extension.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a Quarto extensions — quarto_remove_extension","text":"","code":"if (FALSE) { # \\dontrun{ # Remove an already installed extension quarto_remove_extension(\"quarto-ext/fontawesome\") } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_render.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Markdown — quarto_render","title":"Render Markdown — quarto_render","text":"Render input file specified output format using quarto. input requires computations (e.g. Rmd Jupyter files) computations performed rendering.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_render.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Markdown — quarto_render","text":"","code":"quarto_render(   input = NULL,   output_format = NULL,   output_file = NULL,   execute = TRUE,   execute_params = NULL,   execute_dir = NULL,   execute_daemon = NULL,   execute_daemon_restart = FALSE,   execute_debug = FALSE,   use_freezer = FALSE,   cache = NULL,   cache_refresh = FALSE,   metadata = NULL,   metadata_file = NULL,   debug = FALSE,   quiet = FALSE,   profile = NULL,   quarto_args = NULL,   pandoc_args = NULL,   as_job = getOption(\"quarto.render_as_job\", \"auto\") )"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_render.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Markdown — quarto_render","text":"input input file project directory rendered (defaults rendering project current working directory). output_format Target output format (defaults \"html\"). option \"\" render formats defined within file project. output_file name output file. using NULL, output filename based filename input file. output_file mapped --output option flag quarto CLI. expected filename , path, relative absolute. execute Whether execute embedded code chunks. execute_params list named parameters override custom params specified within YAML front-matter. execute_dir working directory execute embedded code chunks. execute_daemon Keep Jupyter kernel alive (defaults 300 seconds). Note option applicable rendering Jupyter notebooks Jupyter markdown. execute_daemon_restart Restart keepalive Jupyter kernel render. Note option applicable rendering Jupyter notebooks Jupyter markdown. execute_debug Show debug output Jupyter kernel. use_freezer Force use frozen computations incremental file render. cache Cache execution output (uses knitr cache jupyter-cache respectively Rmd Jupyter input files). cache_refresh Force refresh execution cache. metadata optional named list used override YAML metadata. passed YAML file --metadata-file CLI flag. merged metadata-file options specified. metadata_file yaml file passed --metadata-file CLI flags override metadata. merged metadata specified, low precedence metadata options. debug Leave intermediate files place render. quiet Suppress warning messages, R also Quarto CLI (.e --quiet passed command line). quarto.quiet R option R_QUARTO_QUIET environment variable can used globally override function call (can useful debug tool calls quarto_* functions directly). Github Actions, always quiet = FALSE. profile Quarto project profile(s) use. Either character vector profile names NULL use default profile. quarto_args Character vector quarto CLI arguments append Quarto command executed function. mainly intended advanced usage useful CLI arguments yet mirrored dedicated parameter R function. See quarto render --help options. pandoc_args Additional command line arguments pass Pandoc. as_job Render RStudio background job. Default \"auto\", render individual documents normally projects background jobs. Use quarto.render_as_job R option control default globally.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_render.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render Markdown — quarto_render","text":"","code":"if (FALSE) { # \\dontrun{ # Render R Markdown quarto_render(\"notebook.Rmd\") quarto_render(\"notebook.Rmd\", output_format = \"pdf\")  # Render Jupyter Notebook quarto_render(\"notebook.ipynb\")  # Render Jupyter Markdown quarto_render(\"notebook.md\")  # Override metadata quarto_render(\"notebook.Rmd\", metadata = list(lang = \"fr\", execute = list(echo = FALSE))) } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_serve.html","id":null,"dir":"Reference","previous_headings":"","what":"Serve Interactive Document — quarto_serve","title":"Serve Interactive Document — quarto_serve","text":"Serve Shiny interactive document. default, document rendered first served previously rendered document, pass render = FALSE skip rendering.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_serve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Serve Interactive Document — quarto_serve","text":"","code":"quarto_serve(   input,   render = TRUE,   port = getOption(\"shiny.port\"),   host = getOption(\"shiny.host\", \"127.0.0.1\"),   browse = TRUE )"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_serve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Serve Interactive Document — quarto_serve","text":"input input file run. file server: shiny entry YAML front-matter. render Render document serving . port Port listen (defaults 4848) host Hostname bind (defaults 127.0.0.1) browse Open browser preview content. Defaults using RStudio Viewer running within RStudio.Pass function (e.g. utils::browseURL override behavior).","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_update_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a Quarto extensions — quarto_update_extension","title":"Update a Quarto extensions — quarto_update_extension","text":"Update extension folder project running quarto update","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_update_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a Quarto extensions — quarto_update_extension","text":"","code":"quarto_update_extension(   extension = NULL,   no_prompt = FALSE,   quiet = FALSE,   quarto_args = NULL )"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_update_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a Quarto extensions — quarto_update_extension","text":"extension extension update, either name (.e  quarto update extension <gh-org>/<gh-repo>), archive ( quarto update extension <path--zip>) url (quarto update extension <url>). no_prompt prompt confirm approval download external extension. Setting no_prompt = FALSE means Extension Trust accepted. quiet Suppress warning messages, R also Quarto CLI (.e --quiet passed command line). quarto.quiet R option R_QUARTO_QUIET environment variable can used globally override function call (can useful debug tool calls quarto_* functions directly). Github Actions, always quiet = FALSE. quarto_args Character vector quarto CLI arguments append Quarto command executed function. mainly intended advanced usage useful CLI arguments yet mirrored dedicated parameter R function. See quarto render --help options.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_update_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a Quarto extensions — quarto_update_extension","text":"Returns invisibly TRUE extension updated, FALSE otherwise.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_update_extension.html","id":"extension-trust","dir":"Reference","previous_headings":"","what":"Extension Trust","title":"Update a Quarto extensions — quarto_update_extension","text":"Quarto extensions may execute code documents rendered. Therefore, trust author extension, recommend install use extension. default no_prompt = FALSE means function ask explicit approval used interactively, disallow installation.","code":""},{"path":[]},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_update_extension.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a Quarto extensions — quarto_update_extension","text":"","code":"if (FALSE) { # \\dontrun{ # Update a template and set up a draft document from a GitHub repository quarto_update_extension(\"quarto-ext/fontawesome\")  # Update a template and set up a draft document from a ZIP archive quarto_update_extension(\"https://github.com/quarto-ext/fontawesome/archive/refs/heads/main.zip\") } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_use_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Use a custom format extension template — quarto_use_template","title":"Use a custom format extension template — quarto_use_template","text":"Install use template Quarto using quarto use.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_use_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use a custom format extension template — quarto_use_template","text":"","code":"quarto_use_template(   template,   dir = \".\",   no_prompt = FALSE,   quiet = FALSE,   quarto_args = NULL )"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_use_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use a custom format extension template — quarto_use_template","text":"template template install, either archive GitHub repository described documentation https://quarto.org/docs/extensions/formats.html. dir directory install template. must empty directory. use directly non-empty directory, use quarto use template interactively terminal safe installation without overwrite. no_prompt prompt confirm approval download external extension. quiet Suppress warnings messages. quarto_args Character vector quarto CLI arguments append Quarto command executed function. mainly intended advanced usage useful CLI arguments yet mirrored dedicated parameter R function. See quarto render --help options.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_use_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use a custom format extension template — quarto_use_template","text":"","code":"if (FALSE) { # \\dontrun{ # Use a template and set up a draft document from a GitHub repository quarto_use_template(\"quarto-journals/jss\")  # Use a template in current directory by installing it in an empty directory quarto_use_template(\"quarto-journals/jss\", dir = \"new-empty-dir\")  # Use a template and set up a draft document from a ZIP archive quarto_use_template(\"https://github.com/quarto-journals/jss/archive/refs/heads/main.zip\") } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Check quarto version — quarto_version","title":"Check quarto version — quarto_version","text":"Determine specific version quarto binary found quarto_path(). returns 99.9.9 means using dev version.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check quarto version — quarto_version","text":"","code":"quarto_version()"},{"path":"https://quarto-dev.github.io/quarto-r/reference/quarto_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check quarto version — quarto_version","text":"numeric_version quarto version found","code":""},{"path":[]},{"path":"https://quarto-dev.github.io/quarto-r/reference/tbl_qmd_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Quarto Markdown HTML Elements for Tables — tbl_qmd_elements","title":"Create Quarto Markdown HTML Elements for Tables — tbl_qmd_elements","text":"Functions wrap content HTML spans divs data-qmd attributes Quarto processing within HTML tables. functions specifically designed use HTML table packages like kableExtra, gt, DT need Quarto process markdown content within table cells.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/tbl_qmd_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Quarto Markdown HTML Elements for Tables — tbl_qmd_elements","text":"","code":"tbl_qmd_span(content, display = NULL, use_base64 = TRUE)  tbl_qmd_div(content, display = NULL, use_base64 = TRUE)  tbl_qmd_span_base64(content, display = NULL)  tbl_qmd_div_base64(content, display = NULL)  tbl_qmd_span_raw(content, display = NULL)  tbl_qmd_div_raw(content, display = NULL)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/tbl_qmd_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Quarto Markdown HTML Elements for Tables — tbl_qmd_elements","text":"content Character string content wrap. can include Markdown, LaTeX math, Quarto shortcodes. display Optional display text (different content). Useful fallback text Quarto processing available better accessibility. use_base64 Logical, whether base64 encode content (recommended complex content special characters content includes quotes)","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/tbl_qmd_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Quarto Markdown HTML Elements for Tables — tbl_qmd_elements","text":"Character string containing HTML element appropriate data-qmd attributes","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/tbl_qmd_elements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Quarto Markdown HTML Elements for Tables — tbl_qmd_elements","text":"functions create HTML elements data-qmd data-qmd-base64 attributes Quarto processes document rendering. base64 encoding recommended content special characters, quotes, complex formatting. Available functions: tbl_qmd_span() tbl_qmd_div() main functions encoding options tbl_qmd_span_base64() tbl_qmd_div_base64() explicitly use base64 encoding tbl_qmd_span_raw() tbl_qmd_div_raw() explicitly use raw encoding feature requires Quarto version 1.3 higher HTML format outputs. information, see https://quarto.org/docs/authoring/tables.html#html-tables.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/tbl_qmd_elements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Quarto Markdown HTML Elements for Tables — tbl_qmd_elements","text":"","code":"# Basic span usage in table cells tbl_qmd_span(\"**bold text**\") #> [1] \"<span data-qmd-base64=\\\"Kipib2xkIHRleHQqKg==\\\">**bold text**<\/span>\" tbl_qmd_span(\"$\\\\alpha + \\\\beta$\", display = \"Greek formula\") #> [1] \"<span data-qmd-base64=\\\"JFxhbHBoYSArIFxiZXRhJA==\\\">Greek formula<\/span>\"  # Basic div usage in table cells tbl_qmd_div(\"## Section Title\\n\\nContent here\") #> [1] \"<div data-qmd-base64=\\\"IyMgU2VjdGlvbiBUaXRsZQoKQ29udGVudCBoZXJl\\\">## Section Title\\n\\nContent here<\/div>\" tbl_qmd_div(\"{{< video https://example.com >}}\", display = \"[Video content]\") #> [1] \"<div data-qmd-base64=\\\"e3s8IHZpZGVvIGh0dHBzOi8vZXhhbXBsZS5jb20gPn19\\\">[Video content]<\/div>\"  # Explicit encoding choices tbl_qmd_span_base64(\"Complex $\\\\LaTeX$ content\") #> [1] \"<span data-qmd-base64=\\\"Q29tcGxleCAkXExhVGVYJCBjb250ZW50\\\">Complex $\\\\LaTeX$ content<\/span>\" tbl_qmd_span_raw(\"Simple text\") #> [1] \"<span data-qmd=\\\"Simple text\\\">Simple text<\/span>\"  # Use with different HTML table packages if (FALSE) { # \\dontrun{ # With kableExtra library(kableExtra) df <- data.frame(   math = c(tbl_qmd_span(\"$x^2$\"), tbl_qmd_span(\"$\\\\sum_{i=1}^n x_i$\")),   text = c(tbl_qmd_span(\"**Important**\", \"bold\"), tbl_qmd_span(\"`code`\", \"code\")) ) kbl(df, format = \"html\", escape = FALSE) |> kable_styling() } # }"},{"path":"https://quarto-dev.github.io/quarto-r/reference/theme_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a theme for a plotting or table package — theme_colors_flextable","title":"Create a theme for a plotting or table package — theme_colors_flextable","text":"Create theme using background foreground colors (theme_colors_*) using brand.yml file (theme_brand_*).","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/theme_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a theme for a plotting or table package — theme_colors_flextable","text":"","code":"theme_colors_flextable(bg, fg)  theme_brand_flextable(brand_yml)  theme_colors_ggplot2(bg, fg)  theme_brand_ggplot2(brand_yml)  theme_colors_gt(bg, fg)  theme_brand_gt(brand_yml)  theme_colors_plotly(bg, fg)  theme_brand_plotly(brand_yml)  theme_colors_thematic(bg, fg)  theme_brand_thematic(brand_yml)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/theme_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a theme for a plotting or table package — theme_colors_flextable","text":"bg background color fg foreground color brand_yml path brand.yml file","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/theme_helpers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a theme for a plotting or table package — theme_colors_flextable","text":"use theme depend package. See vignettes usage examples.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/write_yaml_metadata_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Write YAML Metadata Block for Quarto Documents — write_yaml_metadata_block","title":"Write YAML Metadata Block for Quarto Documents — write_yaml_metadata_block","text":"Creates YAML metadata block can dynamically inserted Quarto documents R code chunks. allows setting metadata values based R computations, can used Quarto's conditional content features like -meta {{< meta >}} shortcodes.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/write_yaml_metadata_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write YAML Metadata Block for Quarto Documents — write_yaml_metadata_block","text":"","code":"write_yaml_metadata_block(..., .list = NULL)"},{"path":"https://quarto-dev.github.io/quarto-r/reference/write_yaml_metadata_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write YAML Metadata Block for Quarto Documents — write_yaml_metadata_block","text":"... Named arguments include metadata block. Names become metadata keys values become metadata values. take precedence conflicting keys .list. .list Optional list additional metadata include. useful metadata stored list variable. Keys .list overridden matching keys provided ....","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/write_yaml_metadata_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write YAML Metadata Block for Quarto Documents — write_yaml_metadata_block","text":"character string containing formatted YAML metadata block, wrapped knitr::asis_output() renders raw markdown. Returns NULL invisibly metadata provided.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/write_yaml_metadata_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write YAML Metadata Block for Quarto Documents — write_yaml_metadata_block","text":"function converts R values YAML format wraps YAML delimiters (---). Logical values converted lowercase strings (\"true\"/\"false\") ensure compatibility Quarto's metadata system. ... .list contain key, value ... takes precedence override value .list. metadata provided (empty ... NULL empty .list), function returns NULL without generating output. Important: using function Quarto documents, must set chunk option output: asis (#| output: asis) metadata block properly processed Quarto. addresses limitation Quarto metadata must static set dynamically R code document rendering.","code":""},{"path":"https://quarto-dev.github.io/quarto-r/reference/write_yaml_metadata_block.html","id":"quarto-usage","dir":"Reference","previous_headings":"","what":"Quarto Usage","title":"Write YAML Metadata Block for Quarto Documents — write_yaml_metadata_block","text":"use function Quarto document, create R code chunk output: asis option:","code":"```{r} #| output: asis write_yaml_metadata_block(admin = TRUE, version = \"1.0\") Without the `output: asis` option, the YAML metadata block will be displayed as text rather than processed as metadata by Quarto."},{"path":"https://quarto-dev.github.io/quarto-r/reference/write_yaml_metadata_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write YAML Metadata Block for Quarto Documents — write_yaml_metadata_block","text":"","code":"if (FALSE) { # \\dontrun{ # In a Quarto document R chunk with `#| output: asis`: admin <- TRUE user_level <- \"advanced\"  # Set metadata dynamically write_yaml_metadata_block(   admin = admin,   level = user_level,   timestamp = Sys.Date() )  # Use with .list parameter metadata_list <- list(version = \"1.0\", debug = FALSE) write_yaml_metadata_block(.list = metadata_list)  # Direct arguments override .list values base_config <- list(theme = \"dark\", debug = TRUE) write_yaml_metadata_block(   debug = FALSE,  # This overrides debug = TRUE from base_config   author = \"John\",   .list = base_config )  # Then use in Quarto with conditional content: # ::: {.content-visible when-meta=\"admin\"} # Admin-only content here # ::: } # }"},{"path":"https://quarto-dev.github.io/quarto-r/news/index.html","id":"quarto-development-version","dir":"Changelog","previous_headings":"","what":"quarto (development version)","title":"quarto (development version)","text":"Package now licenced MIT like Quarto CLI. Added detect_bookdown_crossrefs() function help users migrate bookdown Quarto identifying cross-references need manual conversion. function scans R Markdown Quarto files detect bookdown-specific cross-reference syntax (like \\@ref(fig:label) (\\#eq:label)) provides detailed guidance converting Quarto syntax (like @fig-label {#eq-label}). offers compact verbose reporting modes, context-aware warnings show syntax patterns actually found files. Added project_path(), get_running_project_root(), find_project_root() functions Quarto-aware project path construction. functions provide consistent way reference files relative project root, working Quarto rendering (using QUARTO_PROJECT_ROOT environment variables) interactive sessions (using intelligent project detection). project_path() function particularly useful Quarto document cells need reference data files scripts project root regardless document’s location subdirectories (#180).0). quarto_preview() now explicitly returns preview server URL (invisibly) documents behavior. enables programmatic workflows taking screenshots webshot2 passing URL automation tools (thanks, @cwickham, #233). Added NA value detection YAML processing prevent silent failures passing R’s NA values Quarto CLI. Functions as_yaml() write_yaml() now validate NA values provide clear error messages actionable suggestions. addresses issues R’s NA values get converted YAML strings (like .na.real) Quarto doesn’t recognize missing values, supported YAML 1.2 spec. help users handle missing data appropriately passing Quarto (#168). Added qmd_to_r_script() function extract R code cells Quarto documents create R scripts. experimental function preserves chunk options using #| syntax, adds YAML metadata spin-style headers, handles mixed-language documents filtering R cells. Complements existing add_spin_preamble() function working R scripts Quarto workflows (#208, quarto-dev/quarto-cli#9112). Added add_spin_preamble() function add YAML preambles R scripts use Quarto Script rendering support. function automatically detects existing preambles provides flexible customization options title preamble parameters (#164). quarto_create_project() gains title argument set project title independently directory name. allows creating projects custom titles, including using name = \".\" create project current directory (thanks, @davidkane9, #148). matches --title addition quarto create project Quarto CLI v1.5.15. quarto_use_template() now supports using templates another empty directory via dir argument. However, function fail clear error message used non-empty directories, interactive prompting required handled Quarto CLI directly (requires Quarto 1.5.15+). Follow quarto-dev/quarto-cli#11127 change ---prompt behavior future Quarto versions. quarto_render(output_file = ) now sets output-file Quarto metadata instead --output CLI flag. allows output file information correctly processed Quarto, passed YAML header. e.g. allows support multiple output formats render call. quarto_render(quarto_args = c('--output', 'dummy.html')) can still used set --output CLI flag enforce using CLI flag metadata processed Quarto (#251, #43). Added check_newer_version() function check newer version Quarto available. function compares current Quarto version latest stable prerelease versions. aimed verbosity default (verbose = TRUE), verbose = FALSE can also set just checking update availability TRUE FALSE return values. Version information cached per session 24 hours minimize network requests. Added write_yaml_metadata_block() function dynamically set YAML metadata Quarto documents R code chunks. addresses limitation Quarto metadata must static defined document header. function enables conditional content metadata-driven document behavior based R computations (thanks, @kmasiello, #137, #160). Added debugging logic quarto vignette engine help diagnose issues Quarto vignettes pkgdown context (thanks, @hadley, #185). Set quarto.log.debug = TRUE enable debugging messages (R_QUARTO_LOG_DEBUG = TRUE environment variable). Set quarto.log.file change file path write (R_QUARTO_LOG_FILE environment variable). Default ./quarto-r-debug.log Debug mode automatically debugging Github Actions workflows, Quarto CLI’s environment variable QUARTO_LOG_LEVEL set DEBUG. Added new_blog_post() function (thanks, @topeto, #22). Make quarto_render(as_job = TRUE) wrapable (thanks, @salim-b, #105). Quarto CLI now correctly use R version one used run functions package (#204). Add quarto_available() function check Quarto CLI found (thanks, @hadley, #187). quarto_render() now correctly set as_job inside RStudio IDE required rstudioapi functions available (#203). Add several new wrapper function (thanks, @parmsam, #192): quarto_list_extensions() list installed extensions using quarto list extensions quarto_remove_extension() remove installed extension using quarto remove extensions quarto_update_extension() update installed extension using quarto update extensions quarto_create_project() offers better user experience now (thanks, @jennybc, #206, #153). quarto_preview() gains quiet argument suppress output R Quarto CLI (thanks, @cwickham, #232.) Add helpers function theme_brand_* theme_colors_* help theme dark light brand using common graph table packages (thanks, @gordonwoodhull, #234). Add quarto.quiet options allow verbose error message quarto_* function used inside package. example, inside pkgdown building Quarto vignettes. pkgdown sets quiet = TRUE internally call quarto_render(), setting options(quarto.quiet = TRUE) allows overwrite . quarto_path() now returns normalized path potential symlink resolved, less confusion quarto_binary_sitrep() (thanks, @jennybc). Fix error interactive prompt extension approval (thanks, @wjschne, #212). quarto_path() now correctly return NULL quarto found PATH (thanks, @jeroen, #220, #221). R_QUARTO_QUIET environment variable can used set quarto.quiet option, overrides quiet = TRUE argument passed quarto_* functions. can useful debug Quarto rendering inside packages, like pkgdown. Overrides also now happens GHA debug logging. Correctly report Quarto CLI error background process call quarto fails (thanks, @salim-b, #235)","code":""},{"path":"https://quarto-dev.github.io/quarto-r/news/index.html","id":"quarto-144","dir":"Changelog","previous_headings":"","what":"quarto 1.4.4","title":"quarto 1.4.4","text":"CRAN release: 2024-07-20 quarto_preview() now looks quarto preview log browse correct url inside RStudio viewer (thanks, @aronatkins, #167). package now uses x.y.z.dev versionning scheme indicate development, patch, minor major versions. follows Tidyverse package version conventions. Adapt tests CRAN checks issues due Quarto v1.5.54 regression (though fixed upstream). Approval check quarto_add_extension() quarto_use_template() now works correctly (thanks, @eveyp, #172).","code":""},{"path":"https://quarto-dev.github.io/quarto-r/news/index.html","id":"quarto-14","dir":"Changelog","previous_headings":"","what":"quarto 1.4","title":"quarto 1.4","text":"CRAN release: 2024-03-06 version now adapted Quarto 1.4 latest stable release. Add registration vignette engine use quarto vignette builder, use .qmd file vignette. See vignette(\"hello\", package = \"quarto\"). (thanks, @dcnorris, #57). New quarto_binary_sitrep() checks possible difference Quarto binary used package, one used RStudio IDE (thanks, @jthomasmock, #12). New is_using_quarto() check directory requires using Quarto (.e. _quarto.yml least one *.qmd file) (thanks, @hadley, #103). New quarto_create_project() calls quarto create project <type> <name> (thanks, @maelle, #87). New quarto_add_extension() quarto_use_template() deal Quarto extensions Quarto project. (thanks, @mcanouil, #45, @remlapmot, #42). quarto_render() quarto_inspect() gains profile argument (thanks, @andrewheiss, #95, @salim-b, #123). quarto_render() gains metadata metadata_file arguments. can used pass modified Quarto metadata render time. set, metadata merged metadata_file content. Internally, metadata passed --metadata-file quarto render (thanks, @mcanouil, #52, @maelle, #49). quarto_render() relevant functions gain quarto_args argument. allows pass additional options flag quarto CLI. advanced usage e.g. new options added Quarto CLI user-facing package’s functions (thanks, @gadenbuie, #125). Add quiet argument functions remove warnings messages. default FALSE function match quarto CLI default. quarto_render(), execute_params now converts boolean value true/false correctly expected quarto render (thanks, @marianklose, #124). Error message now advises re-run quiet = FALSE quarto_render(quiet = TRUE) run quarto render quiet mode (thanks @gadenbuie, #126, @wlandau, #16). rsconnect R package dependency moved Suggest reduce package’s overall number dependencies. rsconnect package required publishing using quarto_publish_*() functions. Users prompted install (interactive mode) installed. Added NEWS.md file track changes package.","code":""}]
